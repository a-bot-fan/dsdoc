<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<meta name="topictype" content="Uc" />
<meta name="devlang" content="cpp" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>The Burger Order Dialog Box</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>The Burger Order Dialog Box</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADlgBurger.m module of the CAADialog.edu 
		framework. It shows how to create a dialog box, and the interactive application 
		needed to display and run it. It includes and explains most of the Dialog 
		framework mechanisms.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADlgBurger Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADlgBurger Do</a></li>
					<li><a href="#How">How to Launch CAADlgBurger</a></li>
					<li><a href="#Where">Where to Find the CAADlgBurger Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This integration example is intended to cover the scope of programming tasks 
to create a dialog box. These tasks are:</p>
<ul>
	<li>Creating an interactive application to display the dialog box.</li>
	<li>Creating dialog objects and setting their behaviors and styles.</li>
	<li>Arranging the dialog objects in the dialog box.</li>
	<li>Setting callbacks onto controls.</li>
	<li>Internationalizing the texts and messages.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADlgBurger Use Case</h2>
<p>CAADlgBurger is a use case of the CAADialog.edu framework that illustrates Dialog 
framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADlgBurger Do</h3>
<p>This example introduces some objects of the Dialog framework, how to arrange 
them in a dialog box, and a key mechanism of the interactive application architecture 
as well: the callback mechanism. The window is a fast-food order dialog box. It 
allows you to select what you want to eat and drink, and generates the order in 
a message window if you click the Apply push button.</p>
<p>Below is the how the dialog box looks like.</p>
<p>
<img alt="Burger Order - Entry Box" height="164" src="images/CAADlgBurger1.jpg" width="566"/></p>
<p>The Dialog framework objects that you can use for selecting a value or an attribute 
and that react to your selection are controls (like radio buttons, combos or spinners). 
The different controls are gathered in frames. For example, the Hamburgers frame 
includes a slider to select the number of hamburgers you want, radio buttons to 
choose the cooking, and click buttons to add condiments. Separators help to distinguish 
the three frames, and above, labels help to understand what their contents refer 
to. Labels can also be used for other Dialog framework objects such as the combo 
to choose the fries size, or the editor to choose the number of fries. A selector 
list with a scrollbar allows you to select a drink within the list and a spinner 
lets you order the number of drinks you want. These objects are shown below.</p>
<p>
<img alt="Burger Order Objects" height="212" src="images/CAADlgBurger3.jpg" width="577"/></p>
<p>Checking, selecting, or entering values display traces in the command prompt 
window. When you have chosen, the Apply push button builds the order and displays 
it in another window. You can reset the different objects to their default value 
using the Reset push button, and exit the window using the Dismiss push button. 
If you press Apply, you order is generated in the following window:</p>
<p>
<img alt="Burger Order Notify Box" height="172" src="images/CAADlgBurger2.jpg" width="222"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADlgBurger</h3>
<p>To launch CAADlgBurger, you will need to set up the build time environment, then 
compile CAADlgBurger along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADlgBurger Code</h3>
<p>The CAADlgBurger use case is made of a several classes located in the CAADlgBurger.m 
module of the CAADialog.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADialog.edu\CAADlgBurger.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The CATDlgBurger.m module includes four files:</p>
<table>
	<tr>
		<td>CAADlgBurgerApplication.h</td>
		<td>The interactive application header file</td>
	</tr>
	<tr>
		<td>CAADlgBurgerApplication.cpp</td>
		<td>The interactive application source file</td>
	</tr>
	<tr>
		<td>CAADlgBurgerWindow.h</td>
		<td>The dialog box header file</td>
	</tr>
	<tr>
		<td>CAADlgBurgerWindow.cpp</td>
		<td>The dialog box source file</td>
	</tr>
</table>
<p>The resource file CAADlgBurgerWindow.CATNls is located in the 
CAADialog.eduRscCNext.m\src\CNext\resources\msgcatalog 
directory.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<ol>
	<li><a href="#Step1">Creating an Interactive Application to Display the Dialog 
		Box</a></li>
	<li><a href="#Step2">Creating Dialog Objects and Setting their Behaviors and 
		Styles</a></li>
	<li><a href="#Step3">Arranging the Dialog Objects in the Dialog Box</a></li>
	<li><a href="#Step4">Setting Callbacks onto Controls</a></li>
	<li><a href="#Step5">Internationalizing the Texts and Messages</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating an Interactive Application to Display the Dialog 
Box</h3>
<p>Thanks to an interactive application, the Burger dialog box can be displayed 
and run as a standalone application. This interactive application is made of the 
class <em>CAADlgBurgerApplication</em> that derives from <em>CATInteractiveApplication</em>. 
Its header file is as follows.</p>
<pre class="code">#ifndef CAADlgBurgerApplication_h
#define CAADlgBurgerApplication_h  <em>// To prevent from multiple inclusion</em>
#include &quot;CATInteractiveApplication.h&quot;


class CAADlgBurgerApplication : public CATInteractiveApplication
{
  public:
                 CAADlgBurgerApplication(const CATString &amp; iApplicationId);
    virtual     ~CAADlgBurgerApplication();
    virtual void BeginApplication();
    virtual int  EndApplication();  
  private:
    CAADlgBurgerApplication();
    CAADlgBurgerApplication(const CAADlgBurgerApplication &amp;iObjectToCopy);
    CAADlgBurgerApplication &amp; operator = (const CAADlgBurgerApplication &amp;iObjectToCopy);
};
#endif</pre>
<p>In addition to the constructor and destructor, this interactive application class 
redefines two methods of <em>CATInteractiveApplication</em>:</p>
<ul>
	<li><code>BeginApplication</code>, called by CATIA just after the application 
		constructor. This method is dedicated to create the different objects managed 
		by the application, namely here the dialog box.</li>
	<li><code>EndApplication</code>, called by CATIA when the application destruction 
		is requested. This method is dedicated to deallocate objects or close files. 
		Note that the application dialog windows and boxes declared as the application 
		class data members are automatically deleted.</li>
</ul>
<p>The dialog box is created in the <code>BeginApplication</code> method, and the
<code>EndApplication</code> has nothing to deallocate since the only data member 
is this dialog box.</p>
<pre class="code">...
void CAADlgBurgerApplication::BeginApplication()
{
   CAADlgBurgerWindow * pMainWindow ;
   pMainWindow = new CAADlgBurgerWindow(this,  <em>// Parent</em>
                                        &quot;BurgerId&quot;, <em>// Identifier</em>
                                        CATDlgGridLayout); <em>// Style</em>
  
   pMainWindow-&gt;Build();
   pMainWindow-&gt;SetVisibility(CATDlgShow);
}

int CAADlgBurgerApplication::EndApplication()
{              
  return 0;
}
...</pre>
<p>Note that the dialog box class is first instantiated, then initialized using 
its <code>Build</code> method, and finally set as visible. The constructor parameters 
are:</p>
<ol>
	<li>The dialog box parent in the command tree structure, set as the application 
		itself</li>
	<li>The identifier used to set its resources from the resource files</li>
	<li>The style, set here to enable the dialog window children objects to be arranged 
		using the grid layout.</li>
</ol>
<p>The application is simply instantiated as follows. CATIA creates the main program 
from this instance.</p>
<pre class="code">...
CAADlgBurgerApplication ApplicationInstance(&quot;Burger&quot;);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating Dialog Objects and Setting their Behaviors and 
Styles</h3>
<p>The file CAADlgBurgerWindow.h contains the following:</p>
<pre class="code">#ifndef CAADlgBurgerWindow_h
#define CAADlgBurgerWindow_h   <em>// To prevent from multiple inclusion</em>

#include &quot;CATDlgDocument.h&quot;


...                               
class CATInteractiveApplication;

class CAADlgBurgerWindow : public CATDlgDocument
{
  DeclareResource(CAADlgBurgerWindow, CATDlgDocument)
  public:
    CAADlgBurgerWindow(CATInteractiveApplication * iParentCommand,
                       const CATString           &amp; iDialogBoxId,
                       CATDlgStyle                 iDialogBoxStyle);
    virtual ~CAADlgBurgerWindow();
    void     Build();

  private:
    CATDlgRadioButton     * _pRare, * _pMedium, * _pWellDone;
    CATDlgCheckButton     * _pKetchup, * _pMustard, * _pPickle,
                          * _pOnion, * _pMayonnaise;
    CATDlgSlider          * _pHamburgerQuantity;
    CATDlgCombo           * _pFriesSize;
    CATDlgEditor          * _pFriesQuantity;
    CATDlgSelectorList    * _pDrinkList;
    CATDlgSpinner         * _pDrinkQuantity;
...
};
#endif</pre>
<p>The <code>DeclareResource</code> macro enables the class and all its dialog objects 
to use the automatic resource assignment. The first parameter is the class name, 
and the resource files must use this class name as file name, such as CAADlgBurgerWindow.CATNls 
for the file containing the texts and messages.</p>
<p>The class has a constructor, a destructor, and a <code>Build</code> method. Pointers 
to the different dialog objects and controls are then declared as data members.</p>
<p>The remaining part of this file deals with the callback method declaration, and a pointer to the interactive application 
stored as a data member:</p>
<pre class="code">...
/*
* Callback function invoked when the value of the CATDlgxxx changes.
*/
void Cooking (CATCommand * iSendingCommand, CATNotification * iSentNotification, CATCommandClientData iUsefulData);
void Seasoning (CATCommand * iSendingCommand, CATNotification * iSentNotification, CATCommandClientData iUsefulData);
void HamburgerQuantity (CATCommand * iSendingCommand, CATNotification * iSentNotification, CATCommandClientData iUsefulData);
void FriesSize (CATCommand * iSendingCommand, CATNotification * iSentNotification, CATCommandClientData iUsefulData);
void FriesQuantity (CATCommand * iSendingCommand, CATNotification * iSentNotification, CATCommandClientData iUsefulData);
void DrinkList (CATCommand * iSendingCommand, CATNotification * iSentNotification, CATCommandClientData iUsefulData);
void DrinkQuantity (CATCommand * iSendingCommand, CATNotification * iSentNotification, CATCommandClientData iUsefulData);
 
...

*
* Callback functions invoked when the coreesponding button is pressed.
*/
 void Apply(CATCommand * iSendingCommand, CATNotification * iSentNotification, CATCommandClientData iUsefulData);
 void Dismiss(CATCommand * iSendingCommand, CATNotification * iSentNotification, CATCommandClientData iUsefulData);
 void Reset(CATCommand * iSendingCommand, CATNotification * iSentNotification, CATCommandClientData iUsefulData);
 void NotifyOK(CATCommand * iSendingCommand, CATNotification * iSentNotification, CATCommandClientData iUsefulData);
 
<em>// Child modal window</em>
    CATDlgNotify * _pOrderWindow;
<em>// The dialog box parent</em>
    CATInteractiveApplication * _pCAABurgerApplication;
};</pre>
<p>The method to execute when a given control 
is activated has the following arguments:</p>
<ul>
	<li>the control</li>
	<li>the notification sent by the control when it is activated</li>
	<li>possibly useful data.</li>
</ul>
<p>Such a method is automatically called because we'll set callbacks that refer 
to these methods. See <a href="#Step4">Setting Callbacks onto Controls</a>.</p>
<p>One method is dedicated to each action associated with a given control.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Arranging the Dialog Objects in the Dialog Box</h3>
<p>Let's have a look at the beginning of CAADlgBurgerWindow.cpp:</p>
<pre class="code">...
CAADlgBurgerWindow::CAADlgBurgerWindow(CATInteractiveApplication * iParentCommand,
                                       const CATString           &amp; iDialogboxId,
                                       CATDlgStyle                 iDialogBoxStyle)
       : CATDlgDocument(iParentCommand, iDialogboxId, iDialogBoxStyle),
	 _pCAABurgerApplication(iParentCommand)
{
  cout &lt;&lt; &quot;------- Burger constructor -------&quot; &lt;&lt; endl;
  
}
...</pre>

<p>The constructor is empty, but calls the base class CATDlgDocument constructor,and 
sets the parent command of the window as the interactive appliction itself. </p>
<p>

  
...</pre>
<img alt="Burger Order Grid Layout" height="196" src="images/CAADlgBurger4.gif" width="593"/></p>
<p>Three rows and five columns are necessary to accommodate the labels for the titles, 
the frames and separators, and the three push buttons. This is coded using instances 
of the <em>CATDlgGridConstraints</em> class for the three frames and the two separators 
as follows:</p>
<pre class="code">...

void CAADlgBurgerWindow::Build()
{
pHamburgerLabel = new CATDlgLabel(this, &quot;HamburgerLabelId&quot;);
CATDlgGridConstraints GC1;
GC1.Row = 0; GC1.Column = 0; GC1.H_Span = 1; GC1.V_Span = 1; 
GC1.Justification = CATGRID_CENTER;
pHamburgerLabel-&gt;SetGridConstraints(GC1);

pFriesLabel = new CATDlgLabel(this, &quot;FriesLabelId&quot;);
GC1.Row = 0; GC1.Column = 2; GC1.H_Span = 1; GC1.V_Span = 1; 
GC1.Justification = CATGRID_CENTER;
pFriesLabel-&gt;SetGridConstraints(GC1);

pDrinkLabel = new CATDlgLabel(this, &quot;DrinkLabelId&quot;);
GC1.Row = 0; GC1.Column = 4; GC1.H_Span = 1; GC1.V_Span = 1;
GC1.Justification = CATGRID_CENTER;
pDrinkLabel-&gt;SetGridConstraints(GC1);

pHamburgerFrame = new CATDlgFrame(this, &quot;HamburgerFrameId&quot;, CATDlgFraNoFrame | CATDlgGridLayout );
CATDlgGridConstraints GCFH(1,0,1,1, CATGRID_4SIDES);
pHamburgerFrame-&gt;SetGridConstraints(GCFH); 

pFriesFrame = new CATDlgFrame(this, &quot;FriesFrameId&quot;, CATDlgFraNoFrame | CATDlgGridLayout);
CATDlgGridConstraints GCFF(1,2,1,1, CATGRID_4SIDES);
pFriesFrame-&gt;SetGridConstraints(GCFF);

pDrinkFrame = new CATDlgFrame(this, &quot;DrinkFrameId&quot;, CATDlgFraNoFrame | CATDlgGridLayout);
CATDlgGridConstraints GCFD(1,4,1,1, CATGRID_4SIDES);
pDrinkFrame-&gt;SetGridConstraints(GCFD);

pSeparator1 = new CATDlgSeparator(this, &quot;Separator1Id&quot;, CATDlgCtrVertical);
CATDlgGridConstraints GCsep1(1,1,1,1,CATGRID_TOP | CATGRID_BOTTOM);
pSeparator1-&gt;SetGridConstraints(GCsep1);
pSeparator2 = new CATDlgSeparator(this, &quot;Separator2Id&quot;, CATDlgCtrVertical);
CATDlgGridConstraints GCsep2(1,3,1,1,CATGRID_TOP | CATGRID_BOTTOM);
pSeparator2-&gt;SetGridConstraints(GCsep2);
  
...</pre>
<p>As an example, the <code>SetGridConstraints</code> method called 
for pHamburgerFrame applies 
the <code>GCFH</code> <em>CATDlgConstraints</em> instance that puts the Hamburger 
frame left corner in the cell located at the intersection of row 1 and column 0, 
and states that this frame extends on one cell in the row direction, and also on 
one cell in the colum direction. The CATGRID_4SIDES 
attribute indicates that the Hamburger frame is attached by the four sides [<a href="#References">2</a>].</p>
<p>Let's go on with the Hamburger frame controls instantiation and arrangement:</p>

<pre class="code">...
<em>// Instantiate and arrange the cooking radio buttons</em>

_pRare = new CATDlgRadioButton(pHamburgerFrame, &quot;RareId&quot;);
_pRare-&gt;SetGridConstraints(0,0,1,1,CATGRID_LEFT);

_pMedium = new CATDlgRadioButton(pHamburgerFrame, &quot;MediumId&quot;);
_pMedium-&gt;SetGridConstraints(1,0,1,1,CATGRID_LEFT);

_pWellDone = new CATDlgRadioButton(pHamburgerFrame, &quot;WellDoneId&quot;);
_pWellDone-&gt;SetGridConstraints(2,0,1,1,CATGRID_LEFT);

_pKetchup = new CATDlgCheckButton(pHamburgerFrame, &quot;KetchupId&quot;);
_pKetchup-&gt;SetGridConstraints(0,1,1,1,CATGRID_LEFT);

_pMustard = new CATDlgCheckButton(pHamburgerFrame, &quot;MustardId&quot;);
_pMustard-&gt;SetGridConstraints(1,1,1,1,CATGRID_LEFT);

_pPickle = new CATDlgCheckButton(pHamburgerFrame, &quot;PickleId&quot;);
_pPickle-&gt;SetGridConstraints(2,1,1,1,CATGRID_LEFT);

_pOnion = new CATDlgCheckButton(pHamburgerFrame, &quot;OnionId&quot;);
_pOnion-&gt;SetGridConstraints(0,2,1,1,CATGRID_LEFT);

_pMayonnaise = new CATDlgCheckButton(pHamburgerFrame, &quot;MayonnaiseId&quot;);
_pMayonnaise-&gt;SetGridConstraints(1,2,1,1,CATGRID_LEFT);

// The slider to choose the count of hamburger
_pHamburgerQuantity = new CATDlgSlider(pHamburgerFrame,
&quot;HamburgerQuantityId&quot;,
CATDlgCtrHorizontal);

_pHamburgerQuantity-&gt;SetGridConstraints(3,0,2,1,CATGRID_LEFT);

// at most 10 hamburger
_pHamburgerQuantity-&gt;SetRange(0.f,10.f,10);
// allow to have integer values
_pHamburgerQuantity-&gt;SetDecimalPoint(0);


...</pre>
<p>The labels, frames, and push buttons are then instantiated and arranged using 
a grid. This is described with the hamburger frame taken as an example:</p>
<p>
<img alt="Burger Order Hamburgers Frame Grid Layout" height="193" src="images/CAADlgBurger5.jpg" width="269"/></p>
<p>The controls of the Hamburger frame are instantiated by passing their father 
in the command tree structure, here the frame itself, and their identifier. They 
are arranged in the grid as they are created. For example, the Rare radio button 
is instantiated, and its location is declared using the <code>SetGridConstraints</code> 
method that creates a grid constraint object with the control with the following 
parameters:</p>
<ul>
	<li>The control top left corner is placed in the grid cell located at the intersection 
		of the row 0 with the column 0 using the first two parameters of <code>SetGridConstraints</code></li>
	<li>It spans over one grid cell in the row 0, and one grid cell in the column 
		0. This is declared using the third and fourth argument of <code>SetGridConstraints</code></li>
	<li>It is attached the object to the left side of the cell thanks to the last 
		argument.</li>
</ul>
<p>The other controls are instantiated and placed in the frame in the same way. 
The slider is set horizontal and ranges from 0 to 10 with 10 steps and no decimal 
point. It thus takes the values 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, and 10.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Setting Callbacks onto Controls</h3>
<p>We will now set the callbacks to trigger the appropriate method when a 
specific control is activated. </p>
<pre class="code">...
//-----------------------------------------------------------------
// Associate callback functions to the various events which can be
// triggered by the widgets of the dialog window.
//-----------------------------------------------------------------

AddAnalyseNotificationCB(_pWellDone, _pWellDone-&gt;GetRadBModifyNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::Cooking, NULL);
AddAnalyseNotificationCB(_pRare, _pRare-&gt;GetRadBModifyNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::Cooking, NULL);
AddAnalyseNotificationCB(_pMedium, _pMedium-&gt;GetRadBModifyNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::Cooking, NULL);

AddAnalyseNotificationCB(_pKetchup, _pKetchup-&gt;GetChkBModifyNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::Seasoning, NULL);
AddAnalyseNotificationCB(_pMustard, _pMustard-&gt;GetChkBModifyNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::Seasoning, NULL);
AddAnalyseNotificationCB(_pPickle, _pPickle-&gt;GetChkBModifyNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::Seasoning, NULL);
AddAnalyseNotificationCB(_pOnion, _pOnion-&gt;GetChkBModifyNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::Seasoning, NULL);
AddAnalyseNotificationCB(_pMayonnaise, _pMayonnaise-&gt;GetChkBModifyNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::Seasoning, NULL);

AddAnalyseNotificationCB(_pHamburgerQuantity,
_pHamburgerQuantity-&gt;GetSliderModifyNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::HamburgerQuantity, NULL);
AddAnalyseNotificationCB(_pFriesSize, _pFriesSize-&gt;GetComboSelectNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::FriesSize, NULL);
AddAnalyseNotificationCB(_pFriesQuantity, _pFriesQuantity-&gt;GetEditModifyNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::FriesQuantity, NULL);
AddAnalyseNotificationCB(_pDrinkList, _pDrinkList-&gt;GetListSelectNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::DrinkList, NULL);
AddAnalyseNotificationCB(_pDrinkQuantity, _pDrinkQuantity-&gt;GetSpinnerModifyNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::DrinkQuantity, NULL);
AddAnalyseNotificationCB(pApply, pApply-&gt;GetPushBActivateNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::Apply, NULL);
AddAnalyseNotificationCB(pDismiss, pDismiss-&gt;GetPushBActivateNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::Dismiss, NULL);
AddAnalyseNotificationCB(pReset, pReset-&gt;GetPushBActivateNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::Reset, NULL);
AddAnalyseNotificationCB(this, GetWindCloseNotification(),
(CATCommandMethod)&amp;CAADlgBurgerWindow::Dismiss, NULL);

 
...</pre>
<p>For example, if the Rare radio button is clicked, or if another radio button 
is clicked while Rare was checked, Rare creates and sends a radio button modification 
notification that is an instance of the class CATDlgRadBModifyNotification. The
<code>AddAnalyseNotificationCB</code> method sets a callback to enable a parent 
class of the radio button, that is in this case the dialog box itself, to be called 
to execute a method whenever the radio button is checked or unchecked. This callback 
associates the method Cooking of the dialog window class with the Rare button 
sending a CATDlgRadBModifyNotification. Cooking is triggered when the 
Rare button is clicked, that is when the <code>GetRadBModifyNotification</code> 
method returns a radio button modification notification. We now need to code
the method Cooking:</p>
<pre class="code">void CAABurgerDialogBox::Cooking(CATCommand        * pSendingCommand,
                              CATNotification      * pSentNotification,
                              CATCommandClientData   UsefulData)
{
  CATUnicodeString usParam[2];
  usParam[0] = ((CATDlgRadioButton *)pSendingCommand)-&gt;GetTitle();
  
  if (((CATDlgRadioButton *)iSendingCommand)-&gt;GetState()==CATDlgCheck) 
  {
     GetResourceValueFromKey(CATString(&quot;CheckedState&quot;), usParam[1]);
  } 
  else
  {
     GetResourceValueFromKey(CATString(&quot;UncheckedState&quot;), usParam[1]);
  }

  CATUnicodeString usMessage;
  usmessage = CATMsgCatalog.BuildMessage(&quot;CAADlgBurgerWindow&quot;,
                                         &quot;RadioButtonNotification&quot;), usParam, 2,
                                         &quot;Radio button sends a CATDlgRadBModifyNotification&quot;);
  
  cout &lt;&lt; usMessage.ConvertToChar() &lt;&lt; endl;
}</pre>
<p>This method simply writes a trace in the command window. It retrieves from the 
object that sends the notification, that is the rare radio button, its title and 
whether it is checked, and makes two <em>CATUnicodeString</em> instances from this 
information, creates the output message by retrieving a standard message from the 
resource file and customizing it with the two parameters.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Internationalizing the Texts and Messages</h3>
<p>The file that contains texts and messages is named CAADlgBurgerWindow.CATNls and is 
stored in CAADialog.eduRscCNext.m\src\CNext\resources\msgcatalog directory.</p>
<pre class="code">Title                     = &quot;Burger Order-Entry Box&quot;;
...
HamburgerLabelId.Title     = &quot;Hamburgers&quot;;
FriesLabelId.Title         = &quot;Fries&quot;;
DrinkLabelId.Title         = &quot;Drinks&quot;;
...
HamburgerFrameId.RareId.Title           = &quot;Rare&quot;;
HamburgerFrameId.MediumId.Title         = &quot;Medium&quot;;
HamburgerFrameId.WellDoneId.Title       = &quot;Well Done&quot;;
...
RadioButtonNotification  = &quot;/p1 button sends a CATDlgRadBModifyNotification to state it is /p2&quot;;
...</pre>
<p>Each resource that is automatically extracted and assigned is referred to using 
a key built thanks a concatenation of the identifiers set when instantiating the 
dialog objects, starting with the dialog box and covering the parent/child tree 
up to the involved control. For example, <code>HamburgerFrameId.RareId.Title</code> 
is the key to retrieve the title assigned to the Rare radio button. It is located 
in the dialog box resource file, and is made of the hamburger frame identifier, 
concatenated to the radio button identifier using a dot as separator, itself concatenated 
to the Title keyword. The mechanism that automatically retrieves the resource value 
is implemented by the Dialog framework and you don't need to instantiate by yourself 
the message catalog to do this.</p>
<p>The standard message for radio buttons is referred to using the <code>RadioButtonNotification</code> 
key. As with combo or editor lines, there is no automatic message retrieval, and 
you should for them instantiate the message catalog, and build a <em>CATUnicodeString</em> 
instance from the key and the possible parameters that customize the standard message.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>&nbsp;</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAADlgTaGridLayout.htm">How to Arrange Dialog Objects Using 
		a Grid</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [April 2015]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
