<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<meta content="Uc" name="topictype" />
<meta content="cpp" name="devlang" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Standard Mechanical Interference Simulation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Standard Mechanical Interference Simulation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAItfStandardClashCheck Use Case.</p>
		<p>This Use Case explains how to create a default Clash type simulation, 
		how to change it's name and run it upon an Assembly of CATParts.</p>
		<p>How to save the results to a list, the event messages to a log file and 
		the simulation itself is also demonstrated.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAItfStandardClashCheck Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAItfStandardClashCheck Do</a></li>
					<li><a href="#How">How to Launch CAAItfStandardClashCheck</a></li>
					<li><a href="#Where">Where to Find the CAAItfStandardClashCheck 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This Use Case is intended to help you use the interfaces contained within the 
PLMInterferenceUseItf framework [<a href="#References">1</a>]. The Use Case demonstrates 
usage of the PLMInterferenceServices interface to create Interference Simulations.</p>
<p>Another interface demonstrated here is PLMIInterferenceSimulation which is used 
for renaming a Simulation, modifying its specification type and launching.</p>
<p>Before dumping the Simulation results, they need to be collected and made into 
a list, to do this the CATListPtrPLMIInterferenceResult interface is used.</p>
<p>Each of the collected results are handled with the PLMIInterferenceResult interface 
showing how further information on the result's type and index (among other attributes) 
can be retrieved.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAItfStandardClashCheck Use Case</h2>
<p>CAAItfStandardClashCheck is a Use Case of the CAAInterferenceUseItf.edu framework 
whose primary objectif is to illustrate the framework:</p>
<ul>
	<li><strong>PLMInterferenceUseItf</strong></li>
</ul>
<p>and its implementation, in doing so the Use Case also calls upon the capabilities 
of the following frameworks:</p>
<ul>
	<li>CATPLMComponentInterfaces</li>
	<li>ProductStructureInterfaces</li>
	<li>CATPLMIntegrationAccess</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAItfStandardClashCheck Do</h3>
<p>The Use Case is a batch command which creates and launches a Mechanical Interference 
Clash detection simulation, upon the Input model illustrated below.</p>
<p>
<img alt="Disassembled Input Model" src="../CAAItfClashCheck/images/Model_elements_presented_separately.png"/></p>
<p><strong>CAAItfStandardClashCheck.3dxml Input Model elements represented individually</strong></p>
<p>
<img alt="Assembled Input Model" src="../CAAItfClashCheck/images/Model_elements_presented_assembled.png"/></p>
<p><strong>CAAItfStandardClashCheck.3dxml Input Model presented with all its elements 
assembled together</strong></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAItfStandardClashCheck</h3>
<p>To launch CAAItfStandardClashCheck, you will need to set up the build time environment, 
then compile CAAItfStandardClashCheck along with its prerequisites, set up the run 
time environment, and then execute the Use Case [<a href="#References">1</a>].</p>
<pre>mkrun -c &quot;CAAItfStandardClashCheck Repository Server LoginTicket SimuName PLMExternalIDValue LogName Version&quot;</pre>
<p>with arguments as described below:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="3">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name</em>:<em>port_number/RootURI</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>LoginTicket</td>
		<td>The login ticket</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Simulation name</td>
		<td>Name to be assigned to the created Simulation</td>
		<td rowspan="4">Component Attribute</td>
	</tr>
	<tr>
		<td>5</td>
		<td>Product Root</td>
		<td>PLM external ID of the root product upon which the simulation will be 
		created : CAAItfStandardClashCheck</td>
	</tr>
	<tr>
		<td>6</td>
		<td>Log File name</td>
		<td>Name given to the generated Log File in which all event messages will 
		be saved</td>
	</tr>
	<tr>
		<td>7</td>
		<td>Version</td>
		<td>A</td>
	</tr>
</table>
<p>Import PLM Data: The Use Case may require input PLM Data: PLM Reference or PLM 
Representation Reference.</p>
<p>This data is stored in 3D XML files, whose extension is &quot;3dxml&quot;. You 
must import these PLM Data into the database using the command described below, 
prior to launching the Use Case.</p>
<ol class="task">
	<li>
		<p>Launch the authoring application, that is, the 3DEXPERIENCE Platform.</p>
	</li>
	<li>
		<p>Connect to the database.</p>
	</li>
	<li>
		<p>On the <kbd>Me</kbd> menu, point to <kbd>Import</kbd>, and click <kbd>
		3D XML</kbd>.</p>
	</li>
</ol>
<p>For more details on how to import a 3D XML file see, Building and Launching a 
Use Case -&gt; Import PLM Data [<a href="#References">1</a>] </p>
<p>The &quot;3dxml&quot; file is supplied in the CAAInterferenceUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAInterferenceUseItf.edu\InputData\CAAItfStandardClashCheck.3dxml</code></p>
<p>Where InstallRootFolder [<a href="#References">1</a>] is the folder where the 
API CD-ROM is installed.</p>
<p>This "3dxml" file contains the representation reference with the following attributes:</p>
<ul>
	<li>PLMExternalIDValue: CAAItfStandardClashCheck</li>
	<li>Version: A</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAItfStandardClashCheck Code</h3>
<p>The CAAItfStandardClashCheck Use Case is made of several classes/a single file 
located in the CAAItfStandardClashCheck.m module of the CAAInterferenceUseItf.edu 
framework: <code>InstallRootFolder\CAADoc\CAAInterferenceUseItf.edu\CAAItfStandardClashCheck.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a></h2>
<h2>Step-by-Step</h2>
<p>There are thirteen logical steps in CAAItfStandardClashCheck.</p>
<p>All of these steps are displayed as links below:</p>
<ol>
	<li><a href="#Step1">Checking the Input Arguments</a></li>
	<li><a href="#Step2">Creating a PLM Session and Connecting to the Input Repository</a></li>
	<li><a href="#Step3">Opening a Log File</a></li>
	<li><a href="#Step4">Opening the Root Reference</a></li>
	<li><a href="#Step5">Creating a Default Dimulation</a></li>
	<li><a href="#Step6">Setting the Simulation Name</a></li>
	<li><a href="#Step7">Setting the Simulation SpecificationType to Clash</a></li>
	<li><a href="#Step8">Launching the Simulation</a></li>
	<li><a href="#Step9">Collecting and Dumping the Simulation Results</a></li>
	<li><a href="#Step10">Displaying the Number of Interferences Detected by the 
		Simulation</a></li>
	<li><a href="#Step11">Saving the Simulation</a></li>
	<li><a href="#Step12">Cleaning the Bag</a></li>
	<li><a href="#Step13">Disconnecting and Deleting the Session</a></li>
</ol>
<p>We will now comment each of these sections of code step by step.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Input Arguments</h3>
<pre class="code"><span class="keyword">int</span> main(<span class="keyword">int</span> iargc, <span class="keyword">char</span> *iargv[])
{

	<span class="keyword">HRESULT</span> hr;
	<span class="keyword">int</span> rc = 0;

	<span class="comment">// 1. Checks the input arguments
	// =============================</span>
	<span class="keyword">if</span> (8 != iargc) {
		rc = 1;
		<span class="keyword">fprintf </span> (stderr,<span class="string">&quot;Usage: %c &lt;repository&gt;  &lt;server&gt;  &lt;loginticket&gt; &lt;SimuName&gt; &lt;PLM External Id Product&gt; &lt;_LogFile&gt; &lt;version&gt; &quot;</span>, iargv[0]);
		return rc;
	}

	<span class="keyword">const</span> <span class="keyword">char</span>* repository	= iargv[1];
	<span class="keyword">const</span> <span class="keyword">char</span>* server		= iargv[2];
	<span class="keyword">const</span> <span class="keyword">char</span>* loginticket	= iargv[3];
	<span class="keyword">const</span> <span class="keyword">char</span>* SimuName	= iargv[4];
	<span class="keyword">const</span> <span class="keyword">char</span>* comp_externalId	= iargv[5];
	<span class="keyword">CATUnicodeString</span> _LogFile	= iargv[6];
	<span class="keyword">CATUnicodeString</span> version	= iargv[7];
	<span class="keyword">FILE</span> * _pLogFile		= NULL ;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a PLM Session and Connecting to the Input Repository</h3>
<pre class="code">	<span class="comment">// 2. Creates a PLM session and connects to the input repository
	// =============================================================
	
	// 2.1/ Set the session parameter from the input arguments</span>
	hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">"Repository"</span>, iargv[1]);
	<span class="keyword">if</span> (FAILED(hr)) rc = 2;

	hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">"Server"</span>, iargv[2]);
	<span class="keyword">if</span> (FAILED(hr)) rc = 3;

	hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;LoginTicket"</span>, iargv[3]);
	<span class="keyword">if</span> (FAILED(hr)) rc = 4;

	<span class="comment">// 2.2/ Create a Session
	// A session must always be created in a batch environment.
	// Deleting the session at the end of the program is also necessary.</span>

	hr = CATPLMSessionServices::<strong>InitPLMSession</strong>();
	<span class="keyword">if</span> (FAILED(hr)) rc = 7;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Opening a Log File</h3>
<pre class="code">	<span class="comment">// 3. Open a log file
	// ==================</span>

	<span class="keyword">if</span> (_LogFile.GetLengthInChar() &gt; 0)
	{
		<span class="comment">// 3.1/ Open Log File from the input file name </span>  
		_pLogFile = <strong>fopen</strong> (_LogFile.ConvertToChar(), <span class="string">"a"</span>);

		<span class="keyword">if</span> (_pLogFile) <span class="keyword">fprintf </span> (_pLogFile, <span class="string">"LogFile created \n"</span>);

		<span class="keyword">else</span>
		{
			<span class="comment">// 3.2/ Send execution messages to stderr should Log File creation fail</span>
			_pLogFile = stderr;
			<span class="keyword">fprintf </span> (_pLogFile, <span class="string">"LogFile creation failed, switching to stderr \n"</span>);
		}
	}
	</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Opening the Root Reference</h3>
<pre class="code">	<span class="comment">// 4. Open the Root Reference
	// ==========================</span>

	<span class="keyword">CATIPLMProducts</span>* piInterferenceModelRoot= NULL;

	<span class="keyword">CATBoolean</span> ExpandAllMode = TRUE;
	<span class="keyword">CATOmbLifeCycleRootsBag</span> Bag;

	<span class="comment">// 4.1/ Open Product in Authoring mode</span>
	hr = ::<strong>CAAOpenPLMComponent</strong>(<span class="string">"VPMReference"</span>, 
				comp_externalId,version,
				IID_CATIPLMProducts,
				(void **)&amp;piInterferenceModelRoot,Bag,ExpandAllMode);

	<span class="keyword">if</span>(FAILED(hr) || (NULL==piInterferenceModelRoot))
	{
		rc = 8;
		<span class="keyword">fprintf </span> (_pLogFile,<span class="string">"ERROR Product Opening  \n"</span>);
		return rc;
	}
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating a Default Simulation</h3>
<pre class="code">	<span class="comment">// 5. Creates a default simulation
	// ===============================</span>

	<span class="comment">// 5.1/ Retrieve PLMNavReference from Product Root</span>
	CATIPLMNavReference * piNavRefRoot = NULL;
	hr = piInterferenceModelRoot-&gt;QueryInterface(<strong>IID_CATIPLMNavReference</strong>, (void**) &amp;piNavRefRoot);

	<span class="keyword">if</span>(FAILED(hr) || (NULL==piNavRefRoot))
	{
		rc = 9;
		<span class="keyword">fprintf </span> (_pLogFile,<span class="string">"ERROR Retrieving PLMNavReference from product root \n"</span>);
		return rc;
	}

	<span class="comment">// 5.2/ Retrieve Interference Services</span>
	PLMIInterferenceServices * piItfServices = NULL ;

	hr = ::<strong>CATInstantiateComponent</strong> (<span class="string">"PLMInterferenceServices"</span>,
				     IID_PLMIInterferenceServices ,
				     (void**)&amp; piItfServices );

	<span class="keyword">if</span>(FAILED(hr) || (NULL==piItfServices))
	{
		rc = 10;
		<span class="keyword">fprintf </span> (_pLogFile,<span class="string">"ERROR Retrieving Interference Services \n"</span>);
		return rc;
	}

	<span class="comment">// 5.3/ Create a default Simulation upon the Product Root</span>
	PLMIInterferenceSimulation * iopiItfSimu = NULL;
	<span class="keyword">if</span>( SUCCEEDED(hr) &amp;&amp; (NULL != piItfServices) &amp;&amp; (NULL != piNavRefRoot))
	{
		hr = piItfServices-&gt;<strong>CreateInterferenceSimulation</strong> (piNavRefRoot, iopiItfSimu);

		...
	}

	<span class="keyword">if</span>(FAILED(hr))
	{
		rc = 11;
		<span class="keyword">fprintf </span> (_pLogFile,<span class="string">"ERROR Creating Interference Simulation \n"</span>);
		return rc;
	}
</pre>
<p>
<img alt="Concatenation of Interference Simulation" src="../CAAItfClashCheck/images/Concatenation_of_Mechanical_Interference_Simulation_Specification.png"/></p>
<p><strong>Concatenation of Mechanical Interference Simulation Specification</strong></p>
<p>The PLMIInterferenceSimulation interface can be used to activate &quot;Knowledge 
Rules&quot; as well as &quot;Engineering Connections&quot;. Activating these relations 
between elements changes the specification of the simulation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Setting the Simulation Name</h3>
<pre class="code">	<span class="comment">// 6. Set the Simulation Name
	//===========================</span>

	<span class="keyword">if</span>(NULL != iopiItfSimu)
	{
		<span class="comment">// 6.1/ Set the Simulation Name to the SimuName variable's value (input as argument)</span>
		hr = iopiItfSimu-&gt;<strong>SetName</strong> (SimuName) ;
		<span class="keyword">if</span> (hr == S_OK)
		{
			<span class="keyword">CATUnicodeString</span>   SimuName_read (<span class="string">""</span>);
			hr = iopiItfSimu-&gt;<strong>GetName</strong> (SimuName_read);

			<span class="comment">// 6.2/ Check the Simulation name has changed to the SimuName variable's value</span>
			<span class="keyword">if</span> ((hr == S_OK) &amp;&amp; (<strong>SimuName_read == SimuName</strong>)) <span class="keyword">fprintf </span> (_pLogFile,<span class="string">"Simulation Name Successfully Set to : %s \n"</span>, SimuName);
			
			<span class="keyword">else</span> <span class="keyword">if</span> (hr != S_OK)  <span class="keyword">fprintf </span> (_pLogFile,<span class="string">"FAILED to retrieve the Simulation Name \n"</span>); 
			
			<span class="keyword">else</span>  <span class="keyword">fprintf </span> (_pLogFile,<span class="string">"Comparaison between the current Simulation Name and %s FAILED \n"</span>, SimuName);  
		} 

		<span class="keyword">else</span> <span class="keyword">fprintf </span> (_pLogFile,<span class="string">"FAILED to set the Simulation Name \n"</span>);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Setting the Simulation SpecificationType to Clash</h3>
<pre class="code">		<span class="comment">// 7. Set the Simulation SpecificationType to Clash
		//=================================================</span>

		<span class="keyword">PLMIInterferenceSimulation::SpecificationType</span> ItfSpecType	= PLMIInterferenceSimulation::SpecStdClash;
		<span class="keyword">PLMIInterferenceSimulation::SpecificationType</span> ItfSpecType_read  = PLMIInterferenceSimulation::SpecStdNone;

		<span class="comment">// 7.1/ Set the Simulation Type to Clash</span>
		hr = iopiItfSimu-&gt;<strong>SetSpecificationType</strong> (ItfSpecType);

		<span class="keyword">if</span> (hr == S_OK)
		{
			<span class="comment">// 7.2/ Check the current Simulation type is Clash</span>
			hr = iopiItfSimu-&gt;<strong>GetSpecificationType</strong> (ItfSpecType_read) ;
			<span class="keyword">if</span> ((hr == S_OK) &amp;&amp; (ItfSpecType_read == PLMIInterferenceSimulation::SpecStdClash)) 
				<span class="keyword">fprintf </span> (_pLogFile,<span class="string">"Set Simulation Specification Type to Clash Successful \n"</span>);

			<span class="keyword">else</span> <span class="keyword">if</span> (hr != S_OK)  <span class="keyword">fprintf </span> (_pLogFile,"FAILED to retrieve the Simulation Type \n"); 
			<span class="keyword">else</span> <span class="keyword">fprintf </span> (_pLogFile,<span class="string">"The retrieved Simulation Specification Type is not Clash \n"</span>);
		}

		<span class="keyword">else</span>
		{
			<span class="keyword">fprintf </span> (_pLogFile,<span class="string">"FAILED to Set SpecificationType \n"</span>);
			rc = 12;
			return rc;
		}
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Launching the Simulation</h3>
<pre class="code">		<span class="comment">// 8. Simulation Launch
		//=====================</span>

		<span class="comment">// 8.1/ Execute the Simulation</span>
		hr = iopiItfSimu-&gt;<strong>Execute</strong> ();
		<span class="keyword">if</span> (hr == S_OK)   <span class="keyword">fprintf </span> (_pLogFile,<span class="string">"Simulation Launch Successful \n"</span>);

		<span class="keyword">else</span>
		{
			<span class="keyword">fprintf </span> (_pLogFile,<span class="string">"FAILED Simulation Launch \n"</span>);
			rc = 13;
			return rc;
		}
</pre>
<p>
<img alt="Assembled Input Model" src="../CAAItfClashCheck/images/1st_Part_of_Interference_Analysis_Table.png"/></p>
<p><strong>1st part of the simulation carried out on CAAItfStandardClashCheck.3dxml 
as dispaly in an interactive session</strong></p>
<p>
<img alt="Assembled Input Model" src="../CAAItfClashCheck/images/2nd_Part_of_Interference_Analysis_Table.png"/></p>
<p><strong>2nd part of the simulation carried out on CAAItfStandardClashCheck.3dxml 
as dispaly in an interactive session</strong></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Collecting and Dumping the Simulation Results</h3>
<pre class="code">		<span class="comment">// 9. Collect and dump the Simulation results
		//===========================================</span>

		<span class="comment">// 9.1/ Collection and storage of Simualtion results in a list</span>
		<span class="keyword">CATListPtrPLMIInterferenceResult</span>  ListResults;
		hr = iopiItfSimu-&gt;<strong>GetInterferenceResults</strong> (ListResults);
		<span class="keyword">if</span> (hr == S_OK)   <span class="keyword">fprintf </span> (_pLogFile,<span class="string">"Simulation results added to a list \n"</span>);

		<span class="keyword">else</span>
		{
			<span class="keyword">fprintf </span> (_pLogFile,<span class="string">"FAILED to collect the Simulation results \n"</span>);
			rc = 14;
			return rc;
		}
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Displaying the Number of Interferences Detected by the 
Simulation</h3>
<pre class="code">		<span class="comment">// 10. Display the number of Interferences detected by the Simulation
		//==================================================================</span>

		<span class="keyword">for </span> (<span class="keyword">int</span> i = 1; i&lt;=64; i++) <span class="keyword">fprintf </span> (_pLogFile,<span class="string">&quot;=&quot;</span>); <span class="keyword">fprintf </span> (_pLogFile,<span class="string">&quot; \n&quot;</span>);

		<span class="comment">// 10.1/ Display the size of the list containing the interferences during simulation</span>
		<span class="keyword">fprintf </span> (_pLogFile,<span class="string">&quot;Total number of interferences detected during the Simulation : %d \n&quot;</span>, ListResults.Size());
		<span class="keyword">for </span> (<span class="keyword">int</span> i = 1; i&lt;=64; i++) <span class="keyword">fprintf </span> (_pLogFile,<span class="string">&quot;=&quot;</span>); <span class="keyword">fprintf </span> (_pLogFile,<span class="string">&quot; \n&quot;</span>);

		<span class="keyword">PLMIInterferenceResult</span> * pResult = NULL ;
		<span class="keyword">PLMIInterferenceResult::ResultType</span>  ResultType = <span class="keyword">PLMIInterferenceResult::ResultTypeUndefined</span> ;
		<span class="keyword">CATUnicodeString</span> strtmp(<span class="string">&quot;&quot;</span>);

		<span class="comment">// 10.2/ Iterate through the interferences contained within the results list</span>
		<span class="keyword">for </span> (<span class="keyword">int</span> i = 1; i &lt;= ListResults.Size(); i++)
		{
		pResult = ListResults[i];

		<span class="comment">// 10.3/ Retrieve the interference result type</span>
		<span class="keyword">if</span> (pResult) hr = pResult-&gt;<strong>GetResultType</strong>(ResultType);

		<span class="keyword">if</span>      (ResultType == <span class="keyword">PLMIInterferenceResult::ResultTypeClash</span>          )   {  strtmp = <span class="string">"Clash"</span> ;            }
		<span class="keyword">else</span> <span class="keyword">if</span> (ResultType == <span class="keyword">PLMIInterferenceResult::ResultTypeContact</span>        )   {  strtmp = <span class="string">"Contact"</span> ;          }
		<span class="keyword">else</span> <span class="keyword">if</span> (ResultType == <span class="keyword">PLMIInterferenceResult::ResultTypeClearance</span>      )   {  strtmp = <span class="string">"Clearance"</span> ;        }
		<span class="keyword">else</span> <span class="keyword">if</span> (ResultType == <span class="keyword">PLMIInterferenceResult::ResultTypeNoInterference</span> )   {  strtmp = <span class="string">"No Interference"</span> ;  }
		<span class="keyword">else</span> <span class="keyword">if</span> (ResultType == <span class="keyword">PLMIInterferenceResult::ResultTypeUndefined</span>      )   {  strtmp = <span class="string">"Undefined"</span> ;        }
		<span class="keyword">else</span>                                                                        {  hr = E_FAIL ;                 }

		<span class="comment">// 10.4/ Display the interference result type and index</span>
		<span class="keyword">fprintf </span> (_pLogFile,<span class="string">"| Interference %d : %s | \n"</span>, i, strtmp);
		<span class="keyword">for </span> (<span class="keyword">int</span> i = 1; i&lt;=26; i++) <span class="keyword">fprintf </span> (_pLogFile,<span class="string">&quot;-&quot;</span>); <span class="keyword">fprintf </span> (_pLogFile,<span class="string">&quot; \n&quot;</span>);
		}
</pre>
<table>
	<tr>
		<td>
		<img alt="Ring Shaft Interference" src="../CAAItfClashCheck/images/Ring_Shaft_Interference_highlight.png"/></td>
		<td>
		<img alt="Key Ring Interference" src="../CAAItfClashCheck/images/Key_Ring_Interference_Highlight.png"/></td>
	</tr>
	<tr>
		<td><strong>Interference detected between the Shaft and Ring</strong></td>
		<td><strong>Interference detected between the Key and Ring</strong></td>
	</tr>
</table>
<p>
<img alt="Key Shaft Interference" src="../CAAItfClashCheck/images/Key_Shaft_Interference_Highlight.png"/></p>
<p><strong>Interference detected between the Key and Shaft</strong></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Saving the Simulation</h3>
<pre class="code">		<span class="comment">// 11. Save the Simulation
		//========================</span>

		CATListPtrCATBaseUnknown ListPtrSaveRoot ;
		ListPtrSaveRoot.<strong>Append</strong> (iopiItfSimu) ;

		<span class="comment">// 11.1/ Save a list of pointers containing the Simulation</span>
		rc  = CATAdpOpenSaveServices::<strong>Save</strong> ( &amp; ListPtrSaveRoot) ;
		<span class="keyword">if</span> (FAILED(rc))
		{
			<span class="comment">// The given simulation name must be unique because saving over a Simulation,
			   is only possible if the existing Simulation is open</span>
			<span class="keyword">fprintf </span> (_pLogFile,<span class="string">"FAILED Unable to save simulation \n"</span>);
			rc = 15;
		}

		<span class="keyword">else</span> <span class="keyword">fprintf </span> (_pLogFile,<span class="string">"Simulation successfully saved \n"</span>);

		...
	}
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step12"></a>Cleaning the Bag</h3>
<pre class="code">	<span class="comment">// 12. Clean Bag
	//----------------</span>
	hr = Bag.<strong>RemoveAll</strong>();
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step13"></a>Disconnecting and Deleting the Session</h3>
<pre class="code">	<span class="comment">// 13. Disconnect and Delete session
	//---------------------------------</span>
	hr = CATPLMSessionServices::<strong>ClosePLMSession</strong>();
	<span class="keyword">if</span> (FAILED(hr)) 
	{
		<span class="keyword">fprintf </span> (_pLogFile,<span class="string">"The SESSION is not Closed \n"</span>);
		rc = 999;
	}

	<span class="keyword">fprintf </span> (_pLogFile, <span class="string">"\n"</span>) ;

	return rc;
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This Use Case shows how to create and launch a mechanical interference simulation 
with standard specification, as well as how to access and save the results allowing 
re-analysis at a later date.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a><br />
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Sep 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
