<html>
	<head>
		<title>Browsing a Review</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="topictype" content="Uc" />
<meta name="devlang" content="cpp" />
		<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
		<meta name="ProgId" content="FrontPage.Editor.Document">
		<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
			<script language="JavaScript" src="../CAADocJavaScript/submit.js">
			</script>
	</head>
	<body>
		<table class="DocHeader">
			<tr>
				<td class="DocHeader1">
					<h1><a name="Top"></a>Browsing a Review</h1>
				</td>
			</tr>
			<tr>
				<td class="use">Use Case</td>
			</tr>
		</table>
		<!---------------------------------comment------------------------------------->
		<table class="abstract">
			<tr>
				<td>
					<h2><a name="Top"></a>Abstract</h2>
					<p>
						This article discusses the <code><b>CAAValBrowsingValidation</b></code> use 
						case. This use case explains how to navigate an existing Review using APIs 
						of the <code><b>Review Modeler</b></code> belonging to the <code><b>ENOValidationInterfaces</b></code>
						framework.
					</p>
					<p><a href="#Learn">What You Will Learn With This Use Case</a></p>
					<ul>
						<li>
							<a href="#UseCase">The CAAValBrowsingValidation Use Case</a>
							<ul>
								<li>
									<a href="#What">What does the CAAValBrowsingValidation do</a>
								<li>
									<a href="#How">How to launch CAAValBrowsingValidation</a>
								<li>
									<a href="#Where">Where to find the CAAValBrowsingValidation</a>
							</ul>
						<li>
							<a href="#Step">Step-by-Step</a>
						<li>
							<a href="#InShort">In Short</a>
						<li>
							<a href="#References">References</a>
						<li>
							<a href="#History">History</a>
					</ul>
				</td>
			</tr>
		</table>
		<!---------------------------------comment------------------------------------->
		<h3><a name="Learn"></a>What You Will Learn With This Use Case</h3>
		<p>
			The primary objective of this use case is to familiarize the user with the APIs 
			meant for browsing a Review. Listed below are the topics that a user gets 
			an introduction to, through this use case.
		</p>
		<ul>
			<li>
			Opening and Loading a Review in various modes based on what components need 
			to be retrieved/browsed
			<li>
				Various APIs of the <code><b>ENOValidationInterfaces</b></code> framework to 
				browse the various entities of a <code><b>Review</b></code>
		</ul>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h3><a name="UseCase"></a>The CAAValBrowsingValidation Use Case</h3>
		<p>
			<code><b>CAAValBrowsingValidation</b></code> is a use case of the <code><b>CAAValidationInterfaces.edu</b></code>
			framework that illustrates the <code><b>ENOValidationInterfaces</b></code> frameworks 
			capabilities.
		</p>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="What"></a>What Does CAAValBrowsingValidation Do</h4>
		<p>The input PLM Data for the Use Case is a <code><b>Review</b></code>.</p>
		<p>
			The use case loads the <code><b>Review</b></code> Reference and its Child 
			in session.
		</p>
		<p>
			The Use Case execution results in an output text which gather all information 
			about the Review. A sample of output can be seen below.
		</p>
		<pre>
Review
  Name         :Review1
  Version      :---
  Description  :
  Organization :VPM
  Project      :DEFAULT
  User         :none
  Type         :Product
  Context  :simpleProduct1---IN_WORK
  Reviewed  :simpleProduct2.1
  Check
    Name         :Check1
    Status       :Unknown
    Description  :
  Markup
    Name         :Markup1
    User         :none
    Description  :
    Markup
      Name         :Reply1
      User         :none
      Description  :
  Highlight
    Name         :Highlight1
    User         :none
    Description  :
</pre>
		<p>
		</p>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="How"></a>How to Launch CAAValBrowsingValidation</h4>
		<p>
			To launch <code><b>CAAValBrowsingValidation</b></code>, you will need to set up 
			the build time environment, then compile <code><b>CAAValBrowsingValidation</b></code>
			along with its prerequisites, set up the run time environment, and then execute 
			the use case [<a href="#References">1</a>].
		</p>
		<p>To launch the use case execute the command:</p>
		<p>
			<a><code><b>mkrun -c " CAAValBrowsingValidation Repository Server 
			LoginTicket 
						Environment PLM_ExternalID V_version"</b></code></a>
		</p>
		<p>where:</p>
		<table class="border1" id="table13">
			<tr>
				<th>
					<b>Repository</b></th>
				<td><script type="text/javascript">insertRepository();</script></td>
			</tr>
			<tr>
				<th>
					<b>Server</b></th>
				<td>The name and port of the server as <i>name</i>:<i>port_number</i></td>
			</tr>
			<tr>
				<th>
					<b>LoginTicket</b></th>
				<td>The login ticket</td>
			</tr>
			<tr>
				<th>
					<b>Environment</b></th>
				<td>A PLM environment containing PLMProductDS (a PRODUCT's custo)</td>
			</tr>
			<tr>
				<th>
					<b>PLM_ExternalID</b></th>
				<td>The <code><b>PLM_ExternalID</b></code> of a PLM Reference or PLM Representation 
					Reference value of the input model (the Review)</td>
			</tr>
			<tr>
				<th>
					<b>V_version</b></th>
				<td>The <code><b>V_version</b></code> of a PLM Reference or PLM Representation 
					Reference</td>
			</tr>
		</table>
		<p>
			where <code>InstallRootDirectory </code>[<a href="#References">1</a>] is the 
			directory where the CAA CD-ROM is installed.
		</p>
		<p>
			Review does not exist in 3D XML format: there is no delivered sample data 
			to test.
		</p>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Where"></a>Where to Find the CAAValBrowsingValidation Code</h4>
		<p>The <a><code><b>CAAValBrowsingValidation</b></code></a> use case is located in 
			the <a><code><b>CAAValBrowsingValidation.m</b></code></a> module of the <a><code><b>CAAValidationInterfaces.edu</b></code></a>
			framework:</p>
		<table>
			<tr>
				<td><code>InstallRootDirectory\</code>CAAValidationInterfaces.edu<code>\</code>CAAValBrowsingValidation.m<code>\</code></td>
			</tr>
		</table>
		<p>where <code><a><b>InstallRootDirectory</b></a></code> [<a href="#References">1</a>] 
			is the directory where the CAA CD-ROM is installed.</p>
		<script type="text/javascript">insertLinkToTop();</script>
		<h3><a name="Step"></a>Step-by-Step</h3>
		<p>Following are the main steps in <code><a><b>CAAValBrowsingValidation</b></a></code>:</p>
		<ol>
			<li>
				<a href="#Prolog">Prolog</a>
			<li>
				<a href="#Open the Review">Open the Review</a>
			<li>
				<a href="#Browse the Review">Browse the Review</a>
			<li>
				<a href="#Epilog">Epilog</a>
		</ol>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Prolog"></a>Prolog</h4>
		<p>
			The <code><b>CAAValBrowsingValidation</b></code> use case begins by creating a 
			session and connecting to the Input Repository. This, being the most 
			fundamental prerequisite for all batch use cases, it is the first step in their 
			execution.
		</p>
		<p>
			In this case, we create a session &amp; connect to Repository with the Reviewer 
			Role (since we ain't modifying PLM data). There are other parameters as well, 
			details of which can be found in the "<b>Creating a Basic PLM Batch</b>" use 
			case article [<a href="#References">2</a>]. This article primarily deals with 
			Opening and Closing a PLM session.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>
int main(int iArgc, char *iArgv[])
{
	HRESULT HR = S_OK;

	//===========================================================================
	// 1. Check for minimum number of arguments
	//===========================================================================
	const int NbMinArgs = 7;
	if (iArgc &lt; NbMinArgs)
	{
		cerr &lt;&lt;"************************************************************" &lt;&lt; endl;
		cerr &lt;&lt; "\t\tUsage: CAAValBrowsingValidation <Repository> <Server> <User> <Password> <SecurityCtx> <Env> <PLMExternalId> <V_version>";
		cerr &lt;&lt;"************************************************************" &lt;&lt; endl;
		return 1;
	}

	// Initialize local variables with Command Line Arguments
	CATString <b>sRepositoryName</b> = iArgv[1];
	CATString <b>sEnvironmentName</b> = iArgv[4];
	CATUnicodeString <b>uPLM_ExternalIDValue</b> = iArgv[5];
	CATUnicodeString <b>uV_versionValue</b> = iArgv[6];

	//===========================================================================
	// 2. Create Session and connect to the input repository.
	//===========================================================================
	HR = ::<b>CAAAdpCreateSession</b>(iArgv[1],iArgv[2],iArgv[3]);

	if (FAILED(HR))
	{
		cerr &lt;&lt; "ERROR Session creation" &lt;&lt; endl;
		return 1;
	}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><b><u><a name="Open the Review"></a></u></b>Open the Review</h4>
		<p>
			The <code><b>CAAValBrowsingValidation</b></code> use case executes the <a href="#The OpenValidation Global Routine">
				The OpenValidation Global Routine</a> to open the Review and add it to 
			bag to manage its life cycle using <b>InsertRoot</b>. Details on life cycle 
			management can be found in a series of articles [<a href="#References">4</a>].
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...
	
	//===========================================================================
	// 3. Open the Review
	//===========================================================================
	CATIVALValidation * piValidation = NULL;
	HR = <b>OpenValidation</b>(sRepositoryName,sEnvironmentName, uPLM_ExternalIDValue, uV_versionValue, piValidation);

	if (FAILED(HR) || (NULL == piValidation))
	{
		cerr &lt;&lt; "ERROR Opening " &lt;&lt; uPLM_ExternalIDValue.ConvertToChar() &lt;&lt; " " &lt;&lt; uV_versionValue.ConvertToChar() &lt;&lt; endl;
		return 1;
	}
	CATOmbLifeCycleRootsBag rootsBag;
	rootsBag.<b>InsertRoot</b>(piValidation);
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><b><u><a name="Browse the Review"></a></u></b>Browse the Review</h4>
		<p>
			The <code><b>CAAValBrowsingValidation</b></code> use case executes the <a href="#The BrowseValidation Global Routine">
				The BrowseValidation Global Routine</a> to compute the output text from the 
			opened Review and remove it from bag to manage its life cycle using <b>RemoveRoot</b>.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

	//===========================================================================
	// 4. Browse the Review
	//===========================================================================
	HR = <b>BrowseValidation</b>(piValidation);
	if (FAILED(HR))
	{
		cerr &lt;&lt; "ERROR during browse" &lt;&lt; endl;
		return 2;
	}

	rootsBag.RomoveRoot(piValidation);
	if (NULL != piValidation)
	{
		piValidation->Release();
		piValidation = NULL;
	}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Epilog"></a>Epilog</h4>
		<p>
			The <code><b>CAAValBrowsingValidation</b></code> use case ends by simply 
			closing the PLM session. Since all batch use cases necessarily conclude by 
			closing the PLM session, we have a dedicated article on this topic namely "<b>Creating 
				a Basic PLM Batch</b>" [<a href="#References">3</a>].
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

	//===========================================================================
	// 5. Close the PLM session
	//===========================================================================
	HR = ::CAAAdpCloseSession();
	if (FAILED(HR))
	{
		cerr &lt;&lt; "ERROR during session closing" &lt;&lt; endl;
		return 2;
	}

	return 0;
}		
</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="The OpenValidation Global Routine"></a>The OpenValidation Global 
			Routine</h4>
		<p>
			<code><b>OpenValidation</b></code> is the routine which opens a Review 
			knowing its repository, environment, name and version.
		</p>
		<p>
			The "<b>Query, Expanding and Opening PLM Components</b>" Use Case [<a href="#References">3</a>] 
			explains the APIs which open/load various PLM Components in session. We 
			retrieve the <code><b><i>CATIVALValidation</i></b></code> Interface 
			pointer loaded in the session.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>
HRESULT <b>OpenValidation</b>(
	const CATString & isRepositoryName,
	const CATString & isEnvironmentName,
	const CATUnicodeString & iuPLM_ExternalIDValue,
	const CATUnicodeString & iuV_versionValue,
	CATIVALValidation *& opiValidation)
{
	HRESULT HR = E_INVALIDARG;		
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<p>
			The <code><b>OpenValidation</b></code><b> </b>routine takes 6 arguments:
		</p>
		<ul>
			<li>
				<code><b><i>CATString</i></b></code>
			type, the repository name
			<li>
				<code><b><i>CATString</i></b></code>
			type, the environment name
			<li>
				<code><b><i>CATUnicodeString</i></b></code>
			type, the Review's name
			<li>
				<code><b><i>CATUnicodeString</i></b></code>
			type, the Review's version
			<li>
				<code><b><i>CATIVALValidation</i></b></code>
			type, the pointer on opened Review
		</ul>
		<p>
			The <code><b>OpenValidation</b></code> global routine has fundamentally four 
			steps:
		</p>
		<ul>
			<li>
				<b><a href="#Retrieve the environment">Retrieve the environment</a></b>
			<li>
				<b><a href="#Retrieve the type">Retrieve the type</a></b>
			<li>
				<b><a href="#Query the database">Query the database</a></b>
			<li>
				<b><a href="#Expand and open">Expand and open</a></b>
		</ul>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Retrieve the environment"></a>Retrieve the environment</h4>
		<p>
			We retrieve the <code><b>environment</b></code>, based on the user choice for <code>
				<b>RepositoryName</b></code> and <code><b>EnvironmentName</b></code>.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

	//===========================================================================
	// 3.1. Retrieve the environment
	//===========================================================================
	CATIAdpEnvironment * piEnv = NULL;
	HR = CATAdpDictionaryServices::GetEnvironment(is<b>RepositoryName</b>, is<b>EnvironmentName</b>, &piEnv);

	if (FAILED(HR))
	{
		if (NULL != piEnv) piEnv->Release();
		piEnv = NULL;
		cerr &lt;&lt; " Error Environment" &lt;&lt; endl;
		return HR;
	}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Retrieve the type"></a>Retrieve the type</h4>
		<p>
			We retrieve the <code><b>PLM reference type</b></code> in the authoring 
			customization, based on <code><b>Review modeler</b></code> name, "<code><b>DMUValidationBase</b></code>".
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

	//===========================================================================
	// 3.2. Retrieve the PLM reference type in the authoring custo
	//===========================================================================
	const CATString sModelerName = "<b>DMUValidationBase</b>";
	CATIAdpType * piAdpType = NULL;
	HR = piEnv-><b>GetAuthoringType</b>(sModelerName, PLMCoreReference, IID_CATIAdpType, (void**) &p<b>iAdpType</b>);

	piEnv->Release();
	piEnv = NULL;

	if (FAILED(HR) || (NULL == piAdpType))
	{
		cerr &lt;&lt; " Error GetAuthoringType" &lt;&lt; endl;
		return HR;
	}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Query the database"></a>Query the database</h4>
		<p>
			We query the database to find the PLM identificator of the Review using the 
			values of attributes <code><b>PLM_ExternalID</b></code> and <code><b>V_version</b></code>as 
			identification set.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

	//===========================================================================
	// 3.3. Query database using "PLM_ExternalID" and "V_version" as identification set
	//===========================================================================
	CATAdpIdentificationSet IdentificationSet;
	IdentificationSet.AddAttribute("<b>PLM_ExternalID</b>", iuPLM_ExternalIDValue);
	IdentificationSet.AddAttribute("<b>V_version</b>", iuV_versionValue);
	CATIAdpPLMIdentificator * piPLMId = NULL;
	HR = CATAdpQueryServices::GetElementByIdentificationSet(<b>piAdpType</b>, IdentificationSet, <b>piPLMId</b>);

	piAdpType->Release();
	piAdpType = NULL;

	if (FAILED(HR) || (piPLMId == NULL))
	{
		cerr &lt;&lt; " Error GetElementByIdentificationSet" &lt;&lt; endl;
		return HR;
	}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Expand and open"></a>Expand and open</h4>
		<p>
			We expand and open the Review using the PLM identificator of the 
			Review.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

	//===========================================================================
	// 3.4. Expand and open
	//===========================================================================
	HR = CATAdpOpenSaveServices::ExpandAndOpen(<b>piPLMId</b>, IID_CATIVALValidation, (void **) &opiValidation, CATAdpOpenSaveServices::Authoring);

	piPLMId->Release();
	piPLMId = NULL;

	if (FAILED(HR))
	{
		cerr &lt;&lt; " Error ExpandAndOpen" &lt;&lt; endl;
		return HR;
	}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="The BrowseValidation Global Routine"></a>The BrowseValidation Global 
			Routine</h4>
		<p>
			<code><b>BrowseValidation</b></code> is the routine which prints information 
			about the Review an its children.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>
HRESULT BrowseValidation(CATIVALValidation * ipiValidation)
{
	HRESULT HR = E_INVALIDARG;		
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<p>
			The <code><b>BrowseValidation</b></code><b> </b>routine takes 1 argument:
		</p>
		<ul>
			<li>
				<code><b><i>CATIVALValidation</i></b></code>
			type, the pointer on Review to browse
		</ul>
		<p>
			The <code><b>BrowseValidation</b></code> global routine has fundamentally three 
			steps:
		</p>
		<ul>
			<li>
				<b><a href="#Verify the Review">Verify the Review</a></b>
			<li>
				<b><a href="#Print informations of Review">Print informations of Review</a></b>
			<li>
				<b><a href="#Print information of Context">Print information of Context</a></b>
			<li>
				<b><a href="#Print information of Reviewed objects">Print information of Reviewed 
						objects</a></b>
			<li>
				<b><a href="#Print information of Checks">Print information of Checks</a></b>
			<li>
				<b><a href="#Print information of Markups">Print information of Markups</a></b>
			<li>
				<b><a href="#Print information of Highlights">Print information of Highlights</a></b>
		</ul>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Verify the Review"></a>Verify the Review</h4>
		<p>
			We verify that the Review pointer is not null.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

	//===========================================================================
	// 4.1. Verify the Review
	//===========================================================================
	if (NULL == ipiValidation)
	{
		cerr &lt;&lt; "Invalid Review" &lt;&lt; endl;
	}
	else
	{
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Print informations of Review"></a>Print informations of Review</h4>
		<p>
			We retrieve the Review attributes.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

		//=========================================================================
		// 4.2. Print informations of Review
		//=========================================================================
		CATIVALEntity * piEntityOnValidation = NULL;
		if (FAILED(ipiValidation->QueryInterface(IID_CATIVALEntity, (void **) &piEntityOnValidation)))
		{
			cerr &lt;&lt; "Invalid entity" &lt;&lt; endl;
		}
		else
		{
			CATListOfCATUnicodeString attributeNameList;
			attributeNameList.Append("PLM_ExternalID");
			attributeNameList.Append("V_version");
			attributeNameList.Append("V_description");
			attributeNameList.Append("V_organization");
			attributeNameList.Append("V_project");
			attributeNameList.Append("V_user");
			attributeNameList.Append("V_Validation_Type");
			CATListOfCATUnicodeString attributeValueList;
			HR = piEntityOnValidation->GetAttributes(attributeNameList, attributeValueList);
			if (FAILED(HR))
			{
				cerr &lt;&lt; "Cannot retrieve attributes of the Entity" &lt;&lt; endl &lt;&lt; flush;
			}
			else
			{
				cout &lt;&lt; "Review" &lt;&lt; endl;
				cout &lt;&lt; "  Name         :" &lt;&lt; attributeValueList[1].ConvertToChar() &lt;&lt; endl;
				cout &lt;&lt; "  Version      :" &lt;&lt; attributeValueList[2].ConvertToChar() &lt;&lt; endl;
				cout &lt;&lt; "  Description  :" &lt;&lt; attributeValueList[3].ConvertToChar() &lt;&lt; endl;
				cout &lt;&lt; "  Organization :" &lt;&lt; attributeValueList[4].ConvertToChar() &lt;&lt; endl;
				cout &lt;&lt; "  Project      :" &lt;&lt; attributeValueList[5].ConvertToChar() &lt;&lt; endl;
				cout &lt;&lt; "  User         :" &lt;&lt; attributeValueList[6].ConvertToChar() &lt;&lt; endl;
				cout &lt;&lt; "  Type         :" &lt;&lt; attributeValueList[7].ConvertToChar() &lt;&lt; endl;
			}
			piEntityOnValidation->Release();
			piEntityOnValidation = NULL;
		}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Print information of Context"></a>Print information of Context</h4>
		<p>
			We retrieve information concerning contexts using <code><b>CATIVALContextRoot</b></code>.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

		//=========================================================================
		// 4.3. Print information of Context
		//=========================================================================
		CATIVALContextRoot * piContextRoot = NULL;
		if (FAILED(ipiValidation->GetContextRoot(piContextRoot)))
		{
			cerr &lt;&lt; "Cannot retrieve ContextRoot" &lt;&lt; endl &lt;&lt; flush;
			HR = E_FAIL;
		}
		else
		{
			if (FAILED(piContextRoot->LoadContexts()))
			{
				cerr &lt;&lt; "Cannot load Contexts" &lt;&lt; endl &lt;&lt; flush;
				HR = E_FAIL;
			}
			else
			{
				CATLISTV(CATBaseUnknown_var) contextsList;
				if (FAILED(piContextRoot->ListContexts(contextsList)))
				{
					cerr &lt;&lt; "Cannot retrieve Contexts list" &lt;&lt; endl &lt;&lt; flush;
					HR = E_FAIL;
				}
				else
				{
					int nbContexts = contextsList.Size();
					for (int i = 1; i &lt;= nbContexts; i++)
					{
						CATIAlias_var spAliasOnValidated(contextsList[i]);
						if (NULL_var != spAliasOnValidated)
						{
							cout &lt;&lt; "  Context  :" &lt;&lt; (spAliasOnValidated->GetAlias()).ConvertToChar() &lt;&lt; endl;
						}
					}
				}
			}
			piContextRoot->Release();
			piContextRoot = NULL;
		}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Print information of Reviewed objects"></a>Print information of 
			Reviewed objects</h4>
		<p>
			We retrieve information concerning Validateds objects directly on Review.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

		//=========================================================================
		// 4.4. Print information of Reviewed objects
		//=========================================================================
		CATLISTV(CATBaseUnknown_var) validatedsList;
		if (FAILED(ipiValidation->ListValidateds(validatedsList)))
		{
			cerr &lt;&lt; "Cannot retrieve Validateds" &lt;&lt; endl &lt;&lt; flush;
			HR = E_FAIL;
		}
		else
		{
			int nbChecks = validatedsList.Size();
			for (int i = 1; i &lt;= nbChecks; i++)
			{
				CATIAlias_var spAliasOnValidated(validatedsList[i]);
				if (NULL_var != spAliasOnValidated)
				{
					cout &lt;&lt; "  Reviewed  :" &lt;&lt; (spAliasOnValidated->GetAlias()).ConvertToChar() &lt;&lt; endl;
				}
			}
		}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Print information of Checks"></a>Print information of Checks</h4>
		<p>
			We retrieve specific information on all Checks.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

		//=========================================================================
		// 4.5. Print information of Checks
		//=========================================================================
		CATLISTV(CATBaseUnknown_var) checksList;
		if (FAILED(ipiValidation->ListChecks(checksList)))
		{
			cerr &lt;&lt; "Cannot retrieve Checks" &lt;&lt; endl &lt;&lt; flush;
			HR = E_FAIL;
		}
		else
		{
			int nbChecks = checksList.Size();
			for (int i = 1; i &lt;= nbChecks; i++)
			{
				BrowseCheck(checksList[i], "  ");
			}
		}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Print information of Markups"></a>Print information of Markups</h4>
		<p>
			We retrieve specific information on all Markups.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

		//=========================================================================
		// 4.6. Print information of Markups
		//=========================================================================
		CATLISTV(CATBaseUnknown_var) reviewsList;
		if (FAILED(ipiValidation->ListReviews(reviewsList)))
		{
			cerr &lt;&lt; "Cannot retrieve Markups" &lt;&lt; endl &lt;&lt; flush;
			HR = E_FAIL;
		}
		else
		{
			int nbReviews = reviewsList.Size();
			for (int i = 1; i &lt;= nbReviews; i++)
			{
				BrowseReview(reviewsList[i], "  ");
			}
		}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Print information of Highlights"></a>Print information of 
			Highlights</h4>
		<p>
			We retrieve specific information on all Highlights.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

		//=========================================================================
		// 4.7. Print information of Highlights
		//=========================================================================
		CATLISTV(CATBaseUnknown_var) concernsList;
		if (FAILED(ipiValidation->ListConcerns(concernsList)))
		{
			cerr &lt;&lt; "Cannot retrieve Highlights" &lt;&lt; endl &lt;&lt; flush;
			HR = E_FAIL;
		}
		else
		{
			int nbConcerns = concernsList.Size();
			for (int i = 1; i &lt;= nbConcerns; i++)
			{
				BrowseConcern(concernsList[i], "  ");
			}
		}
	}

	return HR;
}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="The BrowseCheck Global Routine"></a>The BrowseCheck Global Routine</h4>
		<p>
			<code><b>BrowseCheck</b></code> is the routine which prints information about a 
			Check.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>
HRESULT BrowseCheck(
	CATBaseUnknown_var spBUOnCheck,
	const CATUnicodeString & iuIndentation)
{
	HRESULT HR = E_INVALIDARG;

	char * indent = (char *) iuIndentation.ConvertToChar();		
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<p>
			The <code><b>BrowseCheck</b></code><b> </b>routine takes 1 argument:
		</p>
		<ul>
			<li>
				<code><b><i>CATBaseUnknown_var</i></b></code>
			type, the pointer on Check to browse
		</ul>
		<p>
			The <code><b>BrowseCheck</b></code> global routine has fundamentally three 
			steps:
		</p>
		<ul>
			<li>
				<b><a href="#Verify the Check">Verify the Check</a></b>
			<li>
				<b><a href="#Print informations of Check">Print informations of Check</a></b>
			<li>
				<b><a href="#Print information of linked Requirements">Print information of linked 
						Requirements</a></b>
		</ul>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Verify the Check"></a>Verify the Check</h4>
		<p>
			We verify that the Check pointer is not null and implement <code><b>CATIVALCheck</b></code>
			interface.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

	//===========================================================================
	// 4.5.1. Verify the Check
	//===========================================================================
	if (NULL_var == spBUOnCheck)
	{
		cerr &lt;&lt; "Invalid argument" &lt;&lt; endl;
	}
	else
	{
		CATIVALCheck * piCheck = NULL;
		HR = spBUOnCheck->QueryInterface(IID_CATIVALCheck, (void **) &piCheck);
		if (FAILED(HR))
		{
			cerr &lt;&lt; "Invalid Check" &lt;&lt; endl;
		}
		else
		{
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Print informations of Check"></a>Print informations of Check</h4>
		<p>
			We retrieve the values of various attributs using the <code><b>CATIVALEntity</b></code>
			interface.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

			//=======================================================================
			// 4.5.2. Print information of Check
			//=======================================================================
			CATIVALEntity * piEntityOnCheck = NULL;
			HR = spBUOnCheck->QueryInterface(IID_CATIVALEntity, (void **) &piEntityOnCheck);
			if (FAILED(HR))
			{
				cerr &lt;&lt; "Invalid Entity on Check" &lt;&lt; endl;
			}
			else
			{
				CATListOfCATUnicodeString attributeNameList;
				attributeNameList.Append("PLM_ExternalID");
				attributeNameList.Append("V_Validation_Checkstate");
				attributeNameList.Append("V_description");
				CATListOfCATUnicodeString attributeValueList;
				HR = piEntityOnCheck->GetAttributes(attributeNameList, attributeValueList);
				if (FAILED(HR))
				{
					cerr &lt;&lt; "Cannot retrieve attributes of the Check" &lt;&lt; endl &lt;&lt; flush;
				}
				else
				{
					cout &lt;&lt; indent &lt;&lt; "Check" &lt;&lt; endl;
					cout &lt;&lt; indent &lt;&lt; "  Name         :" &lt;&lt; attributeValueList[1].ConvertToChar() &lt;&lt; endl;
					cout &lt;&lt; indent &lt;&lt; "  Status       :" &lt;&lt; attributeValueList[2].ConvertToChar() &lt;&lt; endl;
					cout &lt;&lt; indent &lt;&lt; "  Description  :" &lt;&lt; attributeValueList[3].ConvertToChar() &lt;&lt; endl;
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Print information of linked Requirements"></a>Print information of 
			linked Requirements</h4>
		<p>
			We print the name of linked Requirements using the <code><b>ListRequirements</b></code>
			method.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

					//===================================================================
					// 4.5.3. Print information of linked Requirements
					//===================================================================
					CATLISTV(CATBaseUnknown_var) requirementsList;
					HR = piCheck->ListRequirements(requirementsList);
					if (FAILED(HR))
					{
						cerr &lt;&lt; "Cannot retrieve Requirements of the Check" &lt;&lt; endl;
					}
					else
					{
						int nbRequirements = requirementsList.Size();
						for (int i = 1; i &lt;= nbRequirements; i++)
						{
							CATIAlias_var spAliasOnRequirement(requirementsList[i]);
							if (NULL_var != spAliasOnRequirement)
							{
								cout &lt;&lt; indent &lt;&lt; "  Requirement  :" &lt;&lt; (spAliasOnRequirement->GetAlias()).ConvertToChar() &lt;&lt; endl;
							}
						}
					}
				}
				piEntityOnCheck->Release();
				piEntityOnCheck = NULL;
			}
			piCheck->Release();
			piCheck = NULL;
		}
	}

	return HR;
}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="The BrowseReview Global Routine"></a>The BrowseReview Global Routine</h4>
		<p>
			<code><b>BrowseReview</b></code> is the routine which prints information about 
			a Markup.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>
HRESULT BrowseReview(
	CATBaseUnknown_var spBUOnReview,
	const CATUnicodeString & iuIndentation)
{
	HRESULT HR = E_INVALIDARG;

	char * indent = (char *) iuIndentation.ConvertToChar();		
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<p>
			The <code><b>BrowseReview</b></code><b> </b>routine takes 1 argument:
		</p>
		<ul>
			<li>
				<code><b><i>CATBaseUnknown_var</i></b></code>
			type, the pointer on Markup to browse
		</ul>
		<p>
			The <code><b>BrowseReview</b></code> global routine has fundamentally three 
			steps:
		</p>
		<ul>
			<li>
				<b><a href="#Verify the Markup">Verify the Markup</a></b>
			<li>
				<b><a href="#Print informations of Markup">Print informations of Markup</a></b>
			<li>
				<b><a href="#Print information of attached Replies">Print information of attached 
						Replies</a></b>
		</ul>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Verify the Markup"></a>Verify the Markup</h4>
		<p>
			We verify that the Markup pointer is not null and implement <code><b>CATIVALReview</b></code>
			interface.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

	//===========================================================================
	// 4.6.1. Verify the Markup
	//===========================================================================
	if (NULL_var == spBUOnReview)
	{
		cerr &lt;&lt; "Invalid argument" &lt;&lt; endl;
	}
	else
	{
		CATIVALReview * piReview = NULL;
		HR = spBUOnReview->QueryInterface(IID_CATIVALReview, (void **) &piReview);
		if (FAILED(HR))
		{
			cerr &lt;&lt; "Invalid Markup" &lt;&lt; endl;
		}
		else
		{
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Print informations of Markup"></a>Print informations of Markup</h4>
		<p>
			We retrieve the values of various attributs using the <code><b>CATIVALEntity</b></code>
			interface.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

			//=======================================================================
			// 4.6.2. Print information of Markup
			//=======================================================================
			CATIVALEntity * piEntityOnReview = NULL;
			HR = spBUOnReview->QueryInterface(IID_CATIVALEntity, (void **) &piEntityOnReview);
			if (FAILED(HR))
			{
				cerr &lt;&lt; "Invalid Entity on Markup" &lt;&lt; endl;
			}
			else
			{
				CATListOfCATUnicodeString attributeNameList;
				attributeNameList.Append("PLM_ExternalID");
				attributeNameList.Append("V_user");
				attributeNameList.Append("V_description");
				CATListOfCATUnicodeString attributeValueList;
				HR = piEntityOnReview->GetAttributes(attributeNameList, attributeValueList);
				if (FAILED(HR))
				{
					cerr &lt;&lt; "Cannot retrieve attributes of the Markup" &lt;&lt; endl &lt;&lt; flush;
				}
				else
				{
					cout &lt;&lt; indent &lt;&lt; "Markup" &lt;&lt; endl;
					cout &lt;&lt; indent &lt;&lt; "  Name         :" &lt;&lt; attributeValueList[1].ConvertToChar() &lt;&lt; endl;
					cout &lt;&lt; indent &lt;&lt; "  User         :" &lt;&lt; attributeValueList[2].ConvertToChar() &lt;&lt; endl;
					cout &lt;&lt; indent &lt;&lt; "  Description  :" &lt;&lt; attributeValueList[3].ConvertToChar() &lt;&lt; endl;
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Print information of attached Replies"></a>Print information of 
			attached Replies</h4>
		<p>
			We browse recursively attached Markups using the <code><b>ListReplies</b></code>
			method.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

					//===================================================================
					// 4.6.3. Print information of attached Replies
					//===================================================================
					CATLISTV(CATBaseUnknown_var) repliesList;
					HR = piReview->ListReplies(repliesList);
					if (FAILED(HR))
					{
						cerr &lt;&lt; "Cannot retrieve Replies of the Markup" &lt;&lt; endl;
					}
					else
					{
						int nbReplies = repliesList.Size();
						for (int i = 1; i &lt;= nbReplies; i++)
						{
							BrowseReview(repliesList[i], iuIndentation+"  ");
						}
					}
				}
				piEntityOnReview->Release();
				piEntityOnReview = NULL;
			}
			piReview->Release();
			piReview = NULL;
		}
	}

	return HR;
}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="The BrowseConcern Global Routine"></a>The BrowseConcern 
			Global Routine</h4>
		<p>
			<code><b>BrowseConcern</b></code> is the routine which prints information 
			about a Highlight.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>
HRESULT BrowseConcern(
	CATBaseUnknown_var spBUOnConcern,
	const CATUnicodeString & iuIndentation)
{
	HRESULT HR = E_INVALIDARG;

	char * indent = (char *) iuIndentation.ConvertToChar();		
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<p>
			The <code><b>BrowseConcern</b></code><b> </b>routine takes 1 argument:
		</p>
		<ul>
			<li>
				<code><b><i>CATBaseUnknown_var</i></b></code>
			type, the pointer on Highlight to browse
		</ul>
		<p>
			The <code><b>BrowseConcern</b></code> global routine has fundamentally 
			three steps:
		</p>
		<ul>
			<li>
				<b><a href="#Verify the Highlight">Verify the Highlight</a></b>
			<li>
				<b><a href="#Print informations of Highlight">Print informations of Highlight</a></b>
			<li>
				<b><a href="#Print information of Slide">Print information of Slide</a></b>
		</ul>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Verify the Highlight"></a>Verify the Highlight</h4>
		<p>
			We verify that the Highlight pointer is not null and implement <code><b>CATIVALConcern</b></code>
			interface.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

	//===========================================================================
	// 4.7.1. Verify the Highlight
	//===========================================================================
	if (NULL_var == spBUOnConcern)
	{
		cerr &lt;&lt; "Invalid argument" &lt;&lt; endl;
	}
	else
	{
		CATIVALConcern * piConcern = NULL;
		HR = spBUOnConcern->QueryInterface(IID_CATIVALConcern, (void **) &piConcern);
		if (FAILED(HR))
		{
			cerr &lt;&lt; "Invalid Highlight" &lt;&lt; endl;
		}
		else
		{
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Print informations of Highlight"></a>Print informations of 
			Highlight</h4>
		<p>
			We retrieve the values of various attributs using the <code><b>CATIVALEntity</b></code>
			interface.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

			//=======================================================================
			// 4.7.2. Print information of Highlight
			//=======================================================================
			CATIVALEntity * piEntityOnConcern = NULL;
			HR = spBUOnConcern->QueryInterface(IID_CATIVALEntity, (void **) &piEntityOnConcern);
			if (FAILED(HR))
			{
				cerr &lt;&lt; "Invalid Entity on Highlight" &lt;&lt; endl;
			}
			else
			{
				CATListOfCATUnicodeString attributeNameList;
				attributeNameList.Append("PLM_ExternalID");
				attributeNameList.Append("V_user");
				attributeNameList.Append("V_description");
				CATListOfCATUnicodeString attributeValueList;
				HR = piEntityOnConcern->GetAttributes(attributeNameList, attributeValueList);
				if (FAILED(HR))
				{
					cerr &lt;&lt; "Cannot retrieve attributes of the Highlight" &lt;&lt; endl &lt;&lt; flush;
				}
				else
				{
					cout &lt;&lt; indent &lt;&lt; "Highlight" &lt;&lt; endl;
					cout &lt;&lt; indent &lt;&lt; "  Name         :" &lt;&lt; attributeValueList[1].ConvertToChar() &lt;&lt; endl;
					cout &lt;&lt; indent &lt;&lt; "  User         :" &lt;&lt; attributeValueList[2].ConvertToChar() &lt;&lt; endl;
					cout &lt;&lt; indent &lt;&lt; "  Description  :" &lt;&lt; attributeValueList[3].ConvertToChar() &lt;&lt; endl;
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<!---------------------------------comment------------------------------------->
		<h4><a name="Print information of Slide"></a>Print information of Slide</h4>
		<p>
			We print the name of linked Requirements using the <code><b>GetInternalConcern</b></code>
			method.
		</p>
		<table class="code" width="912">
			<tbody>
				<tr>
					<td width="904">
						<pre>...

					//===================================================================
					// 4.7.3. Print information of Slide
					//===================================================================
					CATILinkableObject * piInternal = NULL;
					HR = piConcern->GetInternalConcern(piInternal);
					if (FAILED(HR))
					{
						cerr &lt;&lt; "Cannot retrieve Slide of the Highlight" &lt;&lt; endl;
					}
					else
					{
						CATIAlias_var spAliasOnInternal(piInternal);
						if (NULL_var != spAliasOnInternal)
						{
							cout &lt;&lt; indent &lt;&lt; "  Slide  :" &lt;&lt; (spAliasOnInternal->GetAlias()).ConvertToChar() &lt;&lt; endl;
						}
						piInternal->Release();
						piInternal = NULL;
					}
				}
				piEntityOnConcern->Release();
				piEntityOnConcern = NULL;
			}
			piConcern->Release();
			piConcern = NULL;
		}
	}

	return HR;
}
...</pre>
					</td>
				</tr>
			</tbody>
		</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h3><a name="InShort"></a>In Short</h3>
		<p>
			The Use Case navigates a Review and displays it in a text format.
		</p>
		<p>
			The Review and its children are browsed with the <code><b>ENOValidationInterfaces</b></code>
			APIs.
		</p>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h3><a name="References"></a>References</h3>
		<table>
			<TBODY>
				<tr>
				</tr>
				<colgroup>
					<col valign="top" span="1">
				</colgroup>
				<TR>
					<td valign="top" height="12">[1]
						<p>[2]</p>
						<p>[3]</p>
						<p>[4]</p>
					</td>
					<td height="12">
						<a href="../CAADocUseCases/CAADocRunSample.htm">Building 
							and Launching a CAA Use Case</a>
						<p><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
								Creating a Basic PLM Batch</a></p>
						<p><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
								Querying, Expanding &amp; Opening PLM Components</a></p>
						<p>Handling PLM Components in Session</p>
					</td>
				</TR>
		</table>
		<!---------------------------------comment------------------------------------->
		<h3><a name="History"></a>History</h3>
		<table>
			<tr>
				<td valign="top">Version: <strong>1</strong> [Nov 2007]</td>
				<td valign="top">Document created</td>
			</tr>
			<tr>
				<script type="text/javascript">insertLinkToTop();</script>
			</tr>
		</table>
		<!---------------------------------comment------------------------------------->
		<script type="text/javascript">insertCopyright();</script>
	</body>
</html>
