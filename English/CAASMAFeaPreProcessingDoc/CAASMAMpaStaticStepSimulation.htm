<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="topictype" content="Uc" />
<meta name="devlang" content="cpp" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating and Executing a Simulation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating and Executing a Simulation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to create and execute a simulation.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASMAMpaStaticStepSimulation Use Case</a>
			<ul>
				<li><a href="#What">What Does CAASMAMpaStaticStepSimulation Do</a></li>
				<li><a href="#How">How to Launch CAASMAMpaStaticStepSimulation</a></li>
				<li><a href="#Where">Where to Find the CAASMAMpaStaticStepSimulation Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to create and execute a 
simulation using the Generic CAA APIs.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASMAMpaStaticStepSimulation Use Case</h2>
<p>CAASMAMpaStaticStepSimulation is a use case of the CAASMAMpaInterfaces.edu framework that illustrates 
SMAMpaFoundationItf framework capabilities for a simple static simulation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASMAMpaStaticStepSimulation Do?</h3>
<p>CAASMAMpaStaticStepSimulation creates a FEMRep, section properties, a simulation PLM object, 
a structural analysis case, a static step, and some simulation 
features on an existing product; then it executes the resulting simulation.</p>
<p>The model for this use case is shown in [<a href="#Fig1">Fig.1</a>]. It 
contains a product that has eight 3D parts and some publications.</p>
<table>
	<caption align="center"><a name="Fig1"></a>Fig1: The CAASMAMpaInterfaces 
	Product Model</caption>
	<tr>
		<td><img src="images/CAASMAMpaSections001.jpg"/></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASMAMpaStaticStepSimulation</h3>
<p>To launch CAASMAMpaStaticStepSimulation, you will need to set up the build time 
environment, compile CAASMAMpaStaticSimulation.m along with its prerequisites, set 
up the run time environment, and execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case, execute the following command:</p>
<p><code>mkrun -c &quot;<i>CAASMAMpaStaticStepSimulation Repository Server LoginTicket 
PLM_Type PLM_External_Root V_version_Root</i>&quot;</code></p>
<p>where :</p>
<code>
<table  id="table1" >
	<tr>		
		<th><b><i>Repository</i></b></th>
		<td>PLM1</td>
	</tr>
	<tr>
		<th ><b><i>Server</i></b></th>
		<td >The server as host::<i> name</i>:<i>port_number/RootURI</i></td>
	</tr>
	<tr>
		<th><b><i>LoginTicket</i></b></th>
		<td>The login ticket</td>
	</tr>
	<tr>
		<th><b>PLM_Type</b></th>
		<td>The PLM type of the Product to open</td>
	</tr>
	<tr>
		<th><b>PLM_External_Root</b></th>
		<td>The PLM Id of the Product to open</td>
	</tr>
	<tr>
		<th><b>V_version_Root</b></th>
		<td>The PLM version of the Product</td>
	</tr>
</table>
</code>
<p><b>Import PLM Data:</b><br/>
The use case requires PLM data, which consists of the PLM reference and PLM Representation Reference. These data 
are stored in 3D XML files, whose extension is &quot;3dxml&quot;. 
You must import these PLM data files into the database before launching the use case; select <b>Add [+]-&gt;Import -&gt;3D XML</b> and import the file :<br/>
<code>CAASMAMpaInterfaces.edu\CNext\resources\CAASMAMpaInterfaces.3dxml</code>
</p>
<p><b>Important Licensing Information:</b><br/>
Prior to launching the use case, make sure that you have all of the licenses required for launching execution.  Please perform a &quot;Solve&quot; for a similar simulation in the interactive session to confirm the same.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASMAMpaStaticStepSimulation Code</h3>
<p>The CAASMAMpaStaticStepSimulation use case is made of a single source file named CAASMAMpaStaticSimulation.cpp 
located in the CAASMAMpaStaticSimulation.m module of the CAASMAMpaInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASMAMpaInterfaces.edu\CAASMAMpaStaticSimulation.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are 18 logical steps in CAASMAMpaStaticStepSimulation:</p>
<ol>
	<li><a href="#Step1">Opening the Product</a></li>
	<li><a href="#Step2">Creating the FEM Rep and Retrieving its Rep Manager</a></li>
	<li><a href="#Step3">Retrieving the Mesh Manager</a></li>
	<li><a href="#Step4">Creating Meshes on the Pump Body Part</a></li>	
	<li><a href="#Step5">Setting Mesh Attributes</a></li>
	<li><a href="#Step6">Retrieving the Property Manager</a></li>
	<li><a href="#Step7">Creating Sections</a></li>
	<li><a href="#Step8">Setting Individual Attributes on Properties</a></li>
	<li><a href="#Step9">Creating the Simulation PLM Object</a></li>
	<li><a href="#Step10">Retrieving the Scenario Manager</a></li>
	<li><a href="#Step11">Associating the Structural Analysis Case with the FEM Rep</a></li>
	<li><a href="#Step12">Creating and Initializing the Static Step</a></li>
	<li><a href="#Step13">Retrieving the Features Set</a></li>
	<li><a href="#Step14">Creating a Clamp feature</a></li>
	<li><a href="#Step15">Creating Displacement Restraint and Pressure features</a></li>
	<li><a href="#Step16">Launching the Simulation</a></li>
	<li><a href="#Step17">Saving the Simulation PLM Object</a></li>
	<li><a href="#Step18">Closing the PLM Session</a></li>	
</ol>
<p>We will now discuss each of those sections in detail.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the Product</h3>
<p>To open the product test model, you should use services from the <code>
CAAPLMClientAdapter.edu</code> framework.<br />
With the help of the <code>CATIPLMNavReference</code> interface you can navigate through the product structure.</p>
<pre class="code">...
hr = ::CAAAdpCreateSession(repository_n,server_n,loginticket_n);

CATBoolean authoringMode = TRUE;
CATIPLMNavReference * piNavRefOnRoot = NULL;
CATOmbLifeCycleRootsBag Bag;
hr = ::CAAOpenPLMComponent(plmtype_n, plmid_n, version_n, IID_CATIPLMNavReference, (void **) &amp;piNavRefOnRoot , Bag, authoringMode);
	                     
...</pre>
<p>For further information about setting up a PLM session refer to the article &quot;Connecting to V6 Server&quot;[<a href="#References">2</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the FEM Rep and Retrieving its Rep Manager</h3>
<p>The next step of this use case involves the creation of a finite element 
representation model on the product that you just opened.</p>
<p>To do this, use the <code>CreateRepresentation</code> method of <code>CATIFmtRepManager</code> interface to create the new FEM representation 
and then you should call the <code>GetRepManagerFromRepresentation</code> from <code>CATFmtRepManagerServices</code> service class.</p>
<p>For further information about creating a FEM representation, refer to the article &quot;Creating a FEM representation&quot;[<a href="#References">4</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Mesh Manager</h3>
<p>Once you have the rep manager, you should retrieve the nodes and elements set from the 
FEM Representation. </p>
<p>To do this, use the <code>GetSet</code> 
method of <code>CATIFmtRepManager</code> interface with the enum 
<code>CATFmtSetNodesElements</code>. The list of 
all allowable enum values for this method is documented within the <code>CATIFmtRepManager</code> 
interface header.</p>
<p>For further information about retrieving the mesh manager, refer to the article &quot;Opening and scanning FEM&quot;[<a href="#References">5</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating Meshes on the Pump Body Part</h3>
<p>You can create or remove mesh parts within a nodes and elements set with the help of <code>CATIFmtMeshManager</code> interface.</p>
<p>To create a mesh part, choose the mesher by passing in a string 
as the argument of the method <code>CreateMeshPart</code>.
The method returns the generated mesh part.</p>
<p>For further information about creating a mesh part, refer to the &quot;Creating a Mesh Part&quot; use case 
documentation [<a href="#References">6</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Setting Mesh Attributes</h3>
<p>Once you have the mesh part, define the mesh support and attributes such as the element order and the element size.</p>
<p>As seen in the following code snippet, you can use the <code>SetSupport</code> 
method of <code>CATIFmtMeshPart</code> interface to assign supports to the newly created mesh part:</p>
<pre class="code">...
<span class="comment">// Set pump housing mesh support</span>
CATFmtPath * pathOnPumpHousingBody = NULL;
pathOnPumpHousingBody = CATFmtPathFactory::BuildFromObject(portOnPumpHousing);
if(!pathOnPumpHousingBody)
{
    ...
}
hr = pMeshPumpHousing3D-&gt;SetSupport(pathOnPumpHousingBody);
if(FAILED(hr))
{
    ...
}
</pre>
<p>To define the mesh attributes, use the <code>SetGlobalSpecification</code> 
method of <code>CATIFmtMeshPart</code> interface. The list of  
all allowable attribute values for this method is documented within the &quot;Mesh Parts and Their Attributes&quot;[<a href="#References">7</a>] technical article.</p>
<pre class="code">...
<span class="comment">// Element type: Linear</span>
hr = pMeshPumpHousing3D-&gt;SetGlobalSpecification("Mesh","ElementOrder",1);
if(FAILED(hr))
{
    ...
}
<span class="comment">// Size</span>
hr = pMeshPumpHousing3D-&gt;SetGlobalSpecification("Mesh","SizeValue",4.0);
if(FAILED(hr))
{
    ...
}
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Retrieving the Property Manager</h3>
<p>Once you have the rep manager, you should retrieve the property set from the 
FEM Representation. </p>
<p>To do this, use the <code>GetSet</code> 
method of <code>CATIFmtRepManager</code> interface with the enum 
<code>CATFmtSetProperties</code>. The list of 
all allowable enum values for this method are documented within the <code>CATIFmtRepManager</code> 
interface header.</p>
<p>For further information about how to retrieve the property manager, refer to the article &quot;Accessing and 
Managing Sections&quot;[<a href="#References">8</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Creating Sections</h3>
<p>You can create or remove sections within a property set with the 
help of <code>SMAIMpaFactory </code> interface.</p>
<p>For further information about how to create sections, refer to the article &quot;Accessing and 
Managing Sections&quot;[<a href="#References">8</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Setting Individual Attributes on Sections</h3>
<p>Once you have created a section, assign supports to it.</p>
<p>For further information about sections, refer to the article &quot;Accessing and 
Managing Sections&quot;[<a href="#References">8</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Creating the Simulation PLM Object</h3>
<p>The next step of this use case involves creation of a simulation PLM object on the product that you opened 
in step 1.</p>
<p>To do this, use the <code>CreateApplicativeSimulation </code>method of 
<code>CATISimulationPLMFactory</code> interface. You should choose the type of simulation by 
passing in a string as the second argument of the creation method. The list of all 
allowable string values for this method is documented within the 
<code>CATISimulationPLMFactory</code> interface header.</p>
<pre class="code">...
CATIPLMProducts * piPLMProduct=NULL;
hr = spProductAsPrdObj -&gt; QueryInterface(IID_CATIPLMProducts,(void**)&amp;piPLMProduct);
if(FAILED(hr))
{
    ...
}

CATISimulationPLMFactory * piSimPLMFactory = CATGetSimulationFactory();
if(!piSimPLMFactory)
{
    ...
}
CATISimulationPLMManager *piSimulationObject = NULL;
CATUnicodeString SimulationName = &quot;SimulationObj&quot;;
CATUnicodeString SimulationAppKey = &quot;SMAFeaPLMNewSimu&quot;;

hr = piSimPLMFactory-&gt;CreateApplicativeSimulation(SimulationName, SimulationAppKey, NULL, piPLMProduct, piSimulationObject);
if (piPLMProduct) { piPLMProduct-&gt;Release(); piPLMProduct = NULL; }
if(FAILED(hr))
{
    ...
}
</pre>
<p>To use the simulation PLM object, insert it into the life cycle bag that was used to open the product and initialize it.</p>
<pre class="code">...
Bag.InsertRoot(piSimulationObject);
SMAMpaSimulationInitializationService::SimulationMethod lSimulationMethod = SMAMpaSimulationInitializationService::StructuralMechanics;
SMAMpaSimulationInitializationService::InitializeSimulation( piSimulationObject, lSimulationMethod );
</pre>
<p>For further information about the initialization of a simulation object refer to the article <a href="CAASMAMpaScenarioInitialization.htm"> Initializing a Simulation Object</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Retrieving the Scenario Manager</h3>
<p>Once you have created and initialized the simulation PLM object, you should retrieve the scenario manager
to define the scenario.</p>
<p>To do this, use the <code>GetRootManagerFromSO</code> 
method of <code>CATISimulationPLMManager</code> interface with the enum 
<code>SimulationCategoryIdentifier</code>. The list of 
all allowable enum values for this method is documented within the <code>CATISimulationPLMManager</code> 
interface header.</p>
<pre class="code">...
CATBaseUnknown * piRootSpec = NULL;
CATISimulationPLMManager::SimulationCategoryIdentifier ScenarioCategory = CATISimulationPLMManager::Scenario;
hr = piSimulationObject-&gt;GetRootManagerFromSO(ScenarioCategory, piRootSpec);
SMAIMpaScenarioManager_var spScenarioMngr(piRootSpec);
if(NULL!=piRootSpec) { piRootSpec-&gt;Release(); piRootSpec=NULL; }
if(FAILED(hr) || spScenarioMngr == NULL_var)
{
    ...
}
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Associating the Structural Analysis Case with the FEM Rep</h3>
<p>Once you have retrieved the scenario manager, retrieve the analysis case
and associate the FEM representation to it. The analysis case is created automatically by the simulation
PLM object initialization.</p>
<pre class="code">...
<span class="comment">// Retrieve the analysis case</span>
CATListValCATBaseUnknown_var lAnalysisCaseList;
hr = spScenarioMngr-&gt;GetAnalysisCases(lAnalysisCaseList);
if(FAILED(hr) || lAnalysisCaseList.Size() == 0)
{
    ...
}
SMAIMpaScenarioAnalysisCase_var spStaticAnalysisCase(lAnalysisCaseList[1]);
if(NULL_var == spStaticAnalysisCase)
{
    ...
}
<span class="comment">// Associate the previously created FEM rep to the analysis case</span>
hr = spStaticAnalysisCase-&gt;SetFEMRep(spFEMRep);
if(FAILED(hr))
{
    ...
}
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step12"></a>Creating and Initializing the Static Step</h3>
<p>To create a step feature, choose the type of step by passing in a string 
as the first argument of the method <code>CreateFeature</code>.
The second argument returns the generated step feature.
The list of allowable strings for this method is documented within the <code>SMAIMpaFactory </code>
interface header.</p>
<pre class="code">...
SMAIMpaFactory_var spMpaFactory = spStaticAnalysisCase;
if(spMpaFactory == NULL_var)
{
    ...
}
CATBaseUnknown_var spStaticStepUnk = NULL_var;
hr = spMpaFactory-&gt;CreateFeature(&quot;SMAStaticStep&quot;, spStaticStepUnk);
SMAIMpaStaticStep_var spStaticStep(spStaticStepUnk);
SMAIMpaScenarioStep_var spStep(spStaticStepUnk);
if(FAILED(hr) || spStaticStep == NULL_var || spStep == NULL_var)
{
    ...
}
hr=spStaticStep-&gt;SetMaximumIncrements(1000);
</pre>
<p>For the analysis to run successfully and give meaningful results, initialize the step with the
appropriate element type assignments and output requests using the methods <code>CreateElementTypeAssignment</code>
and <code>CreateAnalysisDefaultOutputRequests</code>.</p>
<pre class="code">
hr=spStaticAnalysisCase-&gt;CreateDefaultElementTypeAssignment();
hr=spStep-&gt;CreateAnalysisDefaultOutputRequests();
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step13"></a>Retrieving the Features Set</h3>
<p>Once you have the analysis case, you should retrieve its features set. This feature set aggregates all simulation 
features that can be used by the individual steps in this analysis case.</p>
<p>To retrieve a feature set from an analysis case, you should use the <code>GetFeatureSet</code> 
method of <code>SMAIMpaScenarioAnalysisCase</code> interface.</p>
<pre class="code">...
CATBaseUnknown_var spResourceSet;
hr = spStaticAnalysisCase-&gt;GetFeatureSet(spResourceSet);
if(FAILED(hr) || NULL_var == spResourceSet)
{
    ...
}
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step14"></a>Creating a clamp feature</h3>
<p>You can create or remove simulation features within a features set with the 
help of <code>SMAIMpaFactory </code> interface.</p>
<p>To create a simulation feature, choose the type of feature by passing in a string 
as the first argument of the method <code>CreateFeature</code>.
The second argument returns the generated simulation feature.
The list of allowable strings for this method is documented within the <code>SMAIMpaFactory </code>
interface header.</p>
<pre class="code">...
<span class="comment">// Retrieve the resource set factory</span>
spMpaFactory = spResourceSet;
if(spMpaFactory == NULL_var)
{
    ...
}
<span class="comment">// Create the clamp feature</span>
CATBaseUnknown_var spFeatUnk = NULL_var;
hr = spMpaFactory-&gt;CreateFeature(&quot;SMAClamp&quot;, spFeatUnk);
SMAIMpaClamp_var spClamp(spFeatUnk);
if(FAILED(hr) || spClamp == NULL_var)
{
    ...
}
</pre>
<p>As seen in the following code snippet, you can use the <code>CATISimLinkAccess</code> 
interface to assign supports to the newly created clamp feature:</p>
<pre class="code">...
<span class="comment">// Set the clamp support</span>
CATISimLinkAccess_var spLinkAccess = NULL_var;
hr = spClamp-&gt;GetSupport(spLinkAccess);
if(NULL_var == spLinkAccess)
{
    ...
}
hr = spLinkAccess-&gt;AddLink(pObjInContext);
if(!!pObjInContext) {pObjInContext-&gt;Release(); pObjInContext=NULL;}
if(FAILED(hr))
{
    ...
}
</pre>
<p>Creating and initializing a feature is not sufficient for it to be used during
simulation. You also need to create a feature state within a step to refer to that feature. You can do this by using the <code>CreateFeatureState</code> method from the 
<code>SMAIMpaScenarioStep</code> interface.</p>
<pre class="code">...
<span class="comment">// Assign the clamp to the static step</span>
hr = spStep-&gt;CreateFeatureState(spFeatUnk);
if (FAILED(hr))
{
    ...
}
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step15"></a>Creating Displacement Restraint and Pressure features</h3>
<p>In a manner similar to the one shown above, we create a displacement 
restraint and a pressure feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step16"></a>Launching the Simulation</h3>
<p>Once you have set up the simulation, you can launch it with the help of 
<code>BasicExecuteAll</code> method of <code>SMAMpaExecutionService</code> class.</p>
<pre class="code">...
hr = SMAMpaExecutionService::BasicExecuteAll(piSimulationObject);
if(!!piSimulationObject){ piSimulationObject-&gt;Release(); piSimulationObject = NULL; }
if (FAILED(hr))
{
    ...
}
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step17"></a>Saving the Simulation PLM Object</h3>
<p>To save the simulation PLM object, use services from the <code>
CATAdpOpenSaveServices</code> framework.</p>
<pre class="code">...
CATAdpSaver adpSaver;
hr = adpSaver.Save();
if (FAILED(hr))
{
    ...
}
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step18"></a>Closing the PLM Session</h3>
<p>To close the test model, use services from the <code>CAAPLMClientAdapter.edu</code> 
framework. Before closing the model, you have to manage the lifecycle of the 
AddRef&apos;ed 
objects.</p>
<pre class="code">...
if(NULL!=piNavRefOnRoot) { piNavRefOnRoot-&gt;Release(); piNavRefOnRoot=NULL; }
<span class="comment">// Empties the bag</span>
Bag.RemoveAll();
hr = ::CAAAdpCloseSession();
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAASMAMpaStaticStepSimulation</code> use case demonstrates the use of various 
CAA APIs in <code>SMAMpaFoundationItf</code> framework to create and launch a static 
step simulation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPstProductModeler/CAAPstTaPublication.htm">
		PLM publication</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAFmtDoc/CAAFmtCreateFEMRep.htm">
		Creating a FEM Representation</a></td>
	</tr>
    <tr>
		<td>[5]</td>
		<td>
		<a href="../CAAFmtDoc/CAAFmtOpenFEMRep.htm">
		Opening and scanning FEM</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAAFmtDoc/CAAFmtCreateMeshpart.htm">
		Creating a Mesh Part</a></td>
	</tr>
    <tr>
		<td>[7]</td>
		<td>
		<a href="../CAAFmtDoc/CAAFmtMeshPartAttributes.htm">
		Mesh Parts and Their Attributes</a></td>
	</tr>
    <tr>
		<td>[8]</td>
		<td>
		<a href="../CAAFmtModelDoc/CAASMAMpaSections.htm">
		Accessing and Managing Sections</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Oct 2013]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
