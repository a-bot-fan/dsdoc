<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
  <meta http-equiv="Content-Language" content="en-us" />
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
  <link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
  <script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
  <script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
  <script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
  <title>Structure Functional Design Use Cases Overview</title>
</head>

<body onload="highlightSearchTerms();">

  <table class="DocHeader">
    <tr>
      <td class="DocHeader1">
        <h1><a name="Top"></a>Structure Functional Design Use Cases Overview</h1>
      </td>
    </tr>
    <tr>
      <td class="quick">Quick Reference</td>
    </tr>
  </table>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
  <table class="abstract">
    <tr>
      <td>
        <h2>Abstract</h2>
        <p>
          This article details operations that are common to all Structure Functional Design use cases. It describes step by step the code to use
		in order to retrieve the desired data from the database, and at the end to close the session
        </p>
        <ul>
          <li><a href="#General">Regarding Structure Functional Design Use Cases</a>
            <ul>
              <li><a href="#How">How to Launch a Use Case?</a></li>
              <li><a href="#Where">Where to Find Code?</a></li>
            </ul>
          </li>
          <li><a href="#Step">Step-by-Step</a>
            <ul>
              <li><a href="#Main">The main() method</a></li>
              <li><a href="#Step3">Creating a Session</a></li>
              <li><a href="#Step4">Setting the Current Environment</a></li>
              <li><a href="#Step5">Retrieving the Environment</a></li>
              <li><a href="#Step6">Retrieving the Customized Reference of the Product Modeler</a></li>
              <li><a href="#Step7">Opening the "SddProduct" Model (arg[7])</a></li>
              <li><a href="#Step8">Disconnecting and Deleting the Session</a></li>
            </ul>
          </li>
          <li><a href="#history">History</a></li>
        </ul>
      </td>
    </tr>
  </table>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
  <h2><a name="General"></a>Regarding Structure Functional Design Use Cases</h2>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
  <h3><a name="How"></a>How to Launch a Use Case?</h3>
  <p>
    You will need to set up the build time environment, then compile the use case along with its prerequisites, 
set up the run time environment, and then execute the sample.
  </p>
  <p>To launch the use case, execute the following command unless stated otherwise in the use case page:</p>
  <pre class="code"><em>mkrun -c &quot;[executable_name] Repository Server Login_Ticket PLM_ExternalID&quot;</em></pre>
  <p>where:</p>
  <table class="border1">
    <tr>
      <th>Repository</th>
      <td>PLM1<script type="text/javascript">insertRepository();</script>
      </td>
    </tr>
    <tr>
      <th>Server</th>
      <td>The server as <em>Host::port_number/RootURI</em></td>
    </tr>
    <tr>
      <th>Login_ticket</th>
      <td>The login ticket used to connect to the server. [<a href="#References">1</a>]</td>
    </tr>
    <tr>
      <th>PLM_ExternalID</th>
      <td>The value of the <code>PLM_ExternalID</code> attribute of the PLM representation 
                reference containing the data to create the user feature reference. In unified typing, the
                the search might also be done on the <code>V_name</code> attribute.
      </td>
    </tr>
  </table>
  <p>Additional arguments may exist for some use cases, in which case, their use will be explained in the corresponding documentation page.</p>

  <script type="text/javascript">insertLinkToTop();</script>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
  <h3><a name="Where"></a>Where to Find Code</h3>
  <p>
    Use case samples are usually made of a single source code file located in modules of the CAAStructureDetDesign.edu
framework: <code>InstallRootFolder\CAADoc\CAAStructure<span lang="ko">Func</span>Design.edu\ExecutableName.m\</code> where
        <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed and <code>ExecutableName</code> the name of the executable (exe) file.
  </p>
  <p>Samples usually deal with the following classes:</p>
  <table>
    <tr>
      <td><em>CATPLMSessionServices</em></td>
      <td>Class to create and delete a batch session.</td>
    </tr>
    <tr>
      <td><em>PLMPSISessionHelpers</em></td>
      <td>Class managing session data for the creation of PLM entities.</td>
    </tr>
    <tr>
      <td><em>CATAdpDictionaryServices</em></td>
      <td>Class to provide all basic functions to browse and navigate on PLM dictionaries.</td>
    </tr>
    <tr>
      <td><em>CATAdpQueryServices</em></td>
      <td>Class to manage queries on PLM component in database.</td>
    </tr>
    <tr>
      <td><em>CATAdpOpenSaveServices</em></td>
      <td>Class to manage Open and Save in session.</td>
    </tr>
  </table>
  <script type="text/javascript">insertLinkToTop();</script>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
  <h2><a name="Step"></a>Step-by-Step</h2>
  <p>
    We will now first comment the environment and its components creation 
by looking at the code of the Main. There are seven logical steps at start and 1 logical step at end:
  </p>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Main"></a>The main() function</h3>
  <p>The <code>main()</code> function of all use cases starts with the initialization of a session and ends with
    its closure. In between a <code>Process()</code> function is called which will run the core code of the use
    case. The use of <code>Process()</code> lets the developer use the <code>return</code> statement upon
    failure, while ensuring that the session will be closed.</p>
  <p>We may start by showing a usage help message in case the number of arguments is wrong.</p>
  <pre class="code">...
  if (5 != argc)
  {
    cout &lt;&lt; endl;
    cout &lt;&lt; &quot;Usage: &quot; &lt;&lt; argv[0] &lt;&lt; &quot; &lt;Repository&gt; &lt;Server&gt; &lt;Login_ticket&gt; &lt;PLM_ExternalID&gt;&quot;&lt;&lt; endl;
    cout &lt;&lt;&quot;Repository: The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;Login_ticket: The login ticket to connect to the base&quot; &lt;&lt; endl;
    cout &lt;&lt;&quot;PLM_ExternalID: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed.&quot; &lt;&lt;endl;
    cout &lt;&lt; endl;
    return 1;
  }
...</pre>
  <p>The initialization of the session can be performed thanks to the global method <code>::CAAAdpCreateSession</code>.
    An encapsulation of this method exists in <code>CAASddGlobalServices::InitSession</code>.</p>
  <pre class="code">...
  if (FAILED(::CAAAdpCreateSession(argv[1], argv[2], argv[3], TRUE))) { return 2; }
...</pre>
  <pre class="code">...
  if (rc = CAASddGeneralServices::InitSession(argv[1], argv[2], argv[3])) { return rc; }
...</pre>
  <p>As for the closure of the session, it can be done with <code>::CAAAdpCloseSession</code> or
  <code>CAASddGlobalServices::CloseSession</code></p>
  <pre class="code">...
  if (FAILED(::CAAAdpCloseSession())) { return 3; }
...</pre>
  <pre class="code">...
  if (rc = CAASddGlobalServices::CloseSession()) { return rc; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
  <script type="text/javascript">insertLinkToTop();</script>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
  <h3><a name="Step3"></a>Creating a Session</h3>
  <p>A session must always be created in a batch environment.</p>
  <pre class="code">...
 hr = CATPLMSessionServices::InitPLMSession();
 if (FAILED(hr))
 {
  retCode = 7;
  goto EscapeWay;
 }
...</pre>
  <script type="text/javascript">insertLinkToTop();</script>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
  <h3><a name="Step4"></a>Setting the Current Environment</h3>
  <pre class="code">...
 hr = PLMPSISessionHelpers::GetSessionHelpers(pSessionHelpers);
 if (SUCCEEDED(hr) &amp;&amp; (NULL != pSessionHelpers))
 {
  hr = pSessionHelpers-&gt; SetCurrentEnvironment(envToUse);
  if ( FAILED(hr) )
  {
   retCode = 8;
   goto EscapeWay;
  }
 }
...</pre>
  <script type="text/javascript">insertLinkToTop();</script>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
  <h3><a name="Step5"></a>Retrieving the Environment</h3>
  <pre class="code">...
 hr = CATAdpDictionaryServices::GetEnvironment(repository, envToUse, &amp;pIAdpEnvironment);
 if ( FAILED(hr) || ( NULL == pIAdpEnvironment) )
 {
  retCode = 9;
  goto EscapeWay;
 }
...</pre>
  <script type="text/javascript">insertLinkToTop();</script>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
  <h3><a name="Step6"></a>Retrieving the Customized Reference of the Product Modeler</h3>
  <pre class="code">...
 hr = CATCkePLMNavPublicServices::RetrieveKnowledgeType("VPMReference", hTypeModeler);
 if( ( FAILED(hr) || (NULL_var == hTypeModeler) ) )
 {
  retCode = 10;
  goto EscapeWay;
 }
...</pre>
  <script type="text/javascript">insertLinkToTop();</script>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
  <h3><a name="Step7"></a>Opening the Model (arg[7])</h3>
  <pre class="code">...
 attributeSet.AddAttribute(&quot;PLM_ExternalID&quot;,argv[7]);
 hr = CATAdpPLMQueryServices::GetElementsFromAttributes(hTypeModeler,attributeSet,ListP_QueryResults) ;

 if(1 &lt;= ListP_QueryResults.Size())
 {
  pQueryResult = ListP_QueryResults[1] ;
  if(NULL != pQueryResult)
  {
   hr = pQueryResult-&gt;GetIdentifier(pIPLMIdent) ;
  }
 }
 if ( (FAILED(hr)) || (NULL == pIPLMIdent) )
 {
  retCode = 11;
  goto EscapeWay;
 }
 
 hr = adpOpener.CompleteAndOpen(pIPLMIdent,IID_CATIPLMProducts, (void**) &amp;pIPLMProduct);
 if ( (FAILED(hr)) || (NULL == pIPLMProduct) )
 {
  retCode = 12;
  goto EscapeWay;
 }
...</pre>
  <script type="text/javascript">insertLinkToTop();</script>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
  <h3><a name="Step8"></a>Disconnecting and Deleting the Session</h3>
  <pre class="code">...
 hr = CATPLMSessionServices::ClosePLMSession();
 if (FAILED(hr)) 
 {
  cout &lt;&lt; &quot;The SESSION is not Closed&quot;&lt;&lt;endl;
  retCode = 100;
 }
...</pre>
  <script type="text/javascript">insertLinkToTop();</script>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
  <h2><a name="References"></a>References</h2>
  <table class="reference">
    <tr>
      <td>[1]</td>
    <td><a href="#" onclick="CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcBasicBatch.htm'); return false;">Connecting to V6 Server</a></td>
    </tr>
    <tr>
      <td>[2]</td>
      <td>
        <a href="../CAADocUseCases/CAADocRunSample.htm">Building and Launching a Use Case</a></td>
    </tr>
  </table>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
  <h2><a name="history"></a>History</h2>
  <table class="history">
    <tr>
      <td>Version: <strong>1</strong> [Oct 2014]</td>
      <td>Document created</td>
    </tr>
  </table>
  <script type="text/javascript">insertLinkToTop();</script>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
  <script type="text/javascript">insertCopyright();</script>

</body>

</html>
