<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<meta name="topictype" content="Uc" />
<meta name="devlang" content="cpp" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Retrieving the Track Properties</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Retrieving the Track Properties</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes the procedure to retrieve the properties of a track.</p>
            
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The DELFITMSRReadTrack Use Case</a>
				<ul>
					<li><a href="#What">What Does DELFITMSRReadTrack Do</a></li>
					<li><a href="#How">How to Launch DELFITMSRReadTrack</a></li>
					<li><a href="#Where">Where to Find the DELFITMSRReadTrack 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show the procedure to retrieve the physical and graphical properties of a trajectory.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The DELFITMSRReadTrack Use Case</h2>
<p>DELFITMSRReadTrack is a use case of the <strong>CAAFittingInterfaces.edu</strong> 
framework that illustrates <strong>CAADELFittingAsIsItf</strong> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does DELFITMSRReadTrack Do</h3>
<p>DELFITMSRReadTrack begins with opening of a Manufacturing Simulation 
PLM Component in a <span class="uicontrol">3D</span>EXPERIENCE platform. This Manufacturing Simulation contains a Product 
as Model. Then it retrieves the physical and graphical properties of a trajectory.
Finally the use case saves the modified Manufacturing Simulation PLM Component 
that can be then opened interactively in <span class="uicontrol">3D</span>EXPERIENCE platform to visualize the track.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch DELFITMSRReadTrack</h3>
<p>To launch DELFITMSRReadTrack, you will need to set up the build time 
environment, then compile DELFITMSRReadTrack along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>Launch the use case as follows:</p>
<pre class="code">mkrun -c<em> &quot;DELFITMSRReadTrack repository server loginTicket environment PLMExternalID version&quot;</em></pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>repository</td>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
		<td rowspan="3">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>server</td>
		<td>The name and port of the server as name:port_number (e.g. e4au2dsy:1571)</td>
	</tr>
	<tr>
		<td>3</td>
		<td>loginTicket</td>
		<td>The login ticket</td>
	</tr>
	<tr>
		<td>4</td>
		<td>environment</td>
		<td>A PLM environment</td>
		<td>Environment</td>
	</tr>
	<tr>
		<td>5</td>
		<td>PLMExternalID</td>
		<td>MfgSimulation-WithQuad_Product-CAA (the PLM_ExternalID value of the 
		input Manufacturing Simulation PLM Reference)</td>
		<td rowspan="2">Component Attribute</td>
	</tr>
	<tr>
		<td>6</td>
		<td>version</td>
		<td>--- (the majorrevision value of the input Manufacturing Simulation PLM Reference)</td>
	</tr>
</table>
<ul>
	<li>The <strong>first three</strong> are related to the connection. </li>
	<li>The <strong>environment</strong> is necessary to locate the necessary Modelers.</li>
	<li>The last two arguments define the <strong>values</strong> of the <strong>
		attribute names</strong>.</li>
</ul>
<p>You can execute this use case based on provided data importing the 3D XML file 
supplied in the CAAFittingSequencingItf.edu framework:<code><br />
InstallRootFolder\CAADoc\CAAFittingInterfaces.edu\InputData\MfgSimulation-WithQuad_Product.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the DELFITMSRReadTrack Code</h3>
<p>The DELFITMSRReadTrack use case is made of a single file located in 
the CAAFITEduMSRReadTrack.m module of the CAAFittingInterfaces.edu framework:
<code>InstallRootFolder\CAADoc\CAAFittingInterfaces.edu\DELFITMSRReadTrack.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in DELFITMSRReadTrack:</p>
<ol>
	<li><a href="#Step1">Creating and Initializing the PLM environment</a></li>
	<li><a href="#Step2">Querying and loading the Simulation PLM Reference</a></li>
	<li><a href="#Step3">Retrieving the Track properties</a></li>
	<li><a href="#Step4">Saving the modified Manufacturing Simulation and closing 
		the PLM Session</a></li>
</ol>
<h3><a name="IntroVocab"></a>Introduction and Vocabulary</h3>
<p>Before describing the use case in detail, some technical information are necessary.</p>
    <p>
    A track is the route taken by an object. It is typically used to specify how a product is to be assembled and/or disassembled.
No resources are defined to make the product move along the track: it is an abstract motion. 
A track has a duration and speed at which the object travels.
The path taken by the object is its trajectory. A trajectory is defined by moving the object through space and recording trajectory points (also called TPoints). A trajectory segment is interpolated between each trajectory point.
The trajectory comprises trajectory segments and points. The track can be created at constant time mode or speed mode.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating and initializing the PLM environment</h3>
<pre class="code">...
    HRESULT rc = ::CAAAdpCreateSession(repository, server, loginTicket, TRUE);

    // Set the current environment
    PLMPSISessionHelpers* pSessionHelpers = NULL;
	rc = PLMPSISessionHelpers::GetSessionHelpers(pSessionHelpers);
    rc = pSessionHelpers-&gt;SetCurrentEnvironment(environment);

...</pre>
<p>This section represents the usual sequence for initializing a PLM environment.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2">Querying and loading the Simulation PLM Reference</a></h3>
<pre class="code">
...
    // Retrieve object type to search
    CATIType_var hSimulationRefType;
    rc = CATCkePLMNavPublicServices::RetrieveKnowledgeType("SIMObjSimulationObjectGeneric",hSimulationRefType);
    
    // Query
    CATListPtrCATAdpQueryResult oQueryResults;
    CATAdpAttributeSet AttributeSet;
    AttributeSet.AddAttribute("PLM_ExternalID", SimulationId);
    CATIType_var iType;
    AttributeSet.AddAttribute(CATCkePLMNavPublicServices::GetMajorRevisionAttributeName(iType).CastToCharPtr(), version);
    
    rc = CATAdpPLMQueryServices::GetElementsFromAttributes(hSimulationRefType,AttributeSet,oQueryResults);
    
    // Retrieve the Identifier of the object from the current result
    CATAdpQueryResult* pCurrentResult = oQueryResults[1];
    CATIAdpPLMIdentificator* piPLMId = NULL;
    rc = pCurrentResult-&gt;GetIdentifier(piPLMId);
    
    CATOmbLifeCycleRootsBag LifeCycleBag;
    CATAdpOpener opener(LifeCycleBag);
    
    CATBaseUnknown* pSimulationReference = NULL;
    rc = opener.CompleteAndOpen(piPLMId, IID_CATBaseUnknown, (void**)&pSimulationReference);
    CATBaseUnknown_var hSimulationReference = pSimulationReference;
...</pre>
<p>This section represents the usual sequence to query a Simulation Reference in 
the database and to open it in session.</p>
    <p>Then retrieve the track from simulation reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Track properties</h3>
<pre class="code">...
    DELIFitTrajectory_var hFitTrajectory(oTrackObject);
    <code>// oTrackObject</code> is the retrieved track object.

    if(NULL_var != hFitTrajectory)
    {
        // Retrieve the anchor position of the Trajectory
        CATMathTransformation iAnchorPos;
        rc = hFitTrajectory -&gt; GetAnchorPosition( iAnchorPos );
        
        // Retrieve the number of TPoints in the Trajectory
        int oNumTPoints=1;
        rc = hFitTrajectory -&gt; GetNumberOfTPoints( oNumTPoints );
        
        // Retrieve the Position of the first TPoint relative to the anchor position
        int iIndex=1;
        CATMathTransformation oTPointPos;
        rc = hFitTrajectory -&gt; GetTPointPosition(iIndex, oTPointPos);
        <code>// iIndex</code> is index of the TPoint
        <code>// oTPointPos</code> is position of the TPoint relative to anchor
        
        // Retrieve the Duration for the moving object to move from TPoint1 to TPoint2
        iIndex=2;
        double oDuration=5;
        rc = hFitTrajectory -&gt; GetTPointDuration(iIndex, oDuration);
        <code>// oDuration</code> is the duration for the moving object to traverse to the current TPoint from previous TPoint
        
        // Retrieve Name of the Trajectory
        CATUnicodeString iName="NULL";
        rc = hFitTrajectory -&gt; GetName(iName);
        
        
        // Retrieve the speed at which the moving objects traverse along the Trajectory
        double iSpeed = 0.01 ;
        hFitTrajectory -&gt; GetSpeed( iSpeed );
        <code>// iSpeed</code> is the speed at which the moving object traverse along the trajectory.
        
        // Retrieve Time taken by the the moving object to traverse from firt TPoint to last TPoint
        double iTime = 5 ;
        rc = hFitTrajectory -&gt; GetTotalTime(iTime );
        
        
        /* Retrieve the mode at which the moving object traverses along the Trajectory
        * It can be either Time or Speed
        */
        DELIFitTrajectory::DELTrajectoryMode oMode;
        rc = hFitTrajectory -&gt; GetMode( oMode );
        
        
        // Retrieve the product that moves along the trajectory
        CATListValCATBaseUnknown_var oMovingObjects;
        rc = hFitTrajectory -&gt; GetMovingObjects( oMovingObjects );
        
        
        // Retrieve the position of the product relative to the anchor
        CATListPtrCATMathTransformation oPartPositions;
        rc = hFitTrajectory -&gt; GetPartRelativePositions(oPartPositions );
        
        
        // Retrieve the interpolator type of the trajectory.
        DELIFitTrajectory::DELTrajectoryInterpolator oInterpolator;
        rc = hFitTrajectory -&gt; GetInterpolator (oInterpolator);	
    }
    
    /*----------------------------Retrieve the graphical properties of the Track-------------------------------*/

    DELIFitTrajectoryVisu_var hFitTrajectoryVisu(oTrackObject);
    if(NULL_var != hFitTrajectoryVisu)
    {
        // Retrieve the colour of line of the Trajectory
        int oLineColor=0;
        rc = hFitTrajectoryVisu-&gt;GetLineColor( oLineColor );
        
        // Retrieve the weight(width) of the line of the Trajectory
        int oLineWeight=0;
        rc = hFitTrajectoryVisu-&gt;GetLineWeight( oLineWeight );

        // Retrieves the type(style) of the line of the Trajectory
        int oLineType=0;
        rc = hFitTrajectoryVisu-&gt;GetLineType( oLineType );   
        
        // Retrieve the color of a TPoint in the Trajectory
        int iIndex=1;
        int oPointColor=0;
        rc = hFitTrajectoryVisu-&gt;GetTPointColor( iIndex, oPointColor );
        
        // Retrieve the visu pattern of the TPoints of the Trajectory
        int oPointPattern=0;
        rc = hFitTrajectoryVisu-&gt;GetTPointPattern( iIndex, oPointPattern );
        
        // Retrieve the visibility as an integer
        int oVisibility=0;
        rc = hFitTrajectoryVisu-&gt;GetVisibility( oVisibility ); 
    }
...</pre>
    <p>This section represents the procedure to retrieve the trajectory properties.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4">Saving the modified Manufacturing Simulation</a> and closing 
the PLM Session</h3>
<pre class="code">...
    CATAdpSaver Saver;
    Saver.Save(NULL);
    rc = LifeCycleBag.RemoveAll();
    rc = ::CAAAdpCloseSession();
...</pre>
<p>This section represents the usual sequence for saving a newly created PLM Reference 
and closing the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
    <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
    <p><em>DELIFitTrajectory</em> is the interface to retrieve physical properties of the trajectory.</p>
    <p><em>DELIFitTrajectoryVisu</em> is the interface to retrieve graphical properties of the trajectory.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Sep 2015]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
