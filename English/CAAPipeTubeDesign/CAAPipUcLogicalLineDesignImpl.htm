<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="topictype" content="Uc" />
<meta name="devlang" content="cpp" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Retrieving Information of Logical Line, its Access and Navigation</title>
</head>

<body>

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Retrieving Information of Logical Line, its Access 
		and Navigation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CATPipeTubeDesignUseItf use case. This use 
		case explains how to use, access and navigate logical line objects and 
		their parameters.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPipLogicalLineDesignImpl Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAPipLogicalLineDesignImpl Do</a></li>
				<li><a href="#How">How to Launch CAAPipLogicalLineDesignImpl</a></li>
				<li><a href="#Where">Where to Find the 
					CAAPipLogicalLineDesignImpl Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#history">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first steps in programming 
with CATIA Piping and Tubing Interfaces.
		<br/>
			Its main intent is to provide you information about using,
accessing and navigating logical line objects and their parameters.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPipLogicalLineDesignImpl Use Case</h2>
<p>CAAPipLogicalLineDesignImpl.m is a use case of the CAAPipeTubeDesign.edu 
framework that illustrates the CATIA Piping and Tubing Interfaces framework 
capabilities with regards to logical line objects.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPipLogicalLineDesignImpl Do</h3>
<p>The goal of CAAPipLogicalLineDesignImpl use case is to demostrate how to use and 
navigate logical line objects and how to access its parameters.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPipLogicalLineDesignImpl</h3>
<p>To launch CAAPipLogicalLineDesignImpl, you will need to set up the build time 
environment, then compile CAAPipLogicalLineDesignImpl.m along with its 
prerequisites, set up the run time environment, and then execute the sample.</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;CAAPipLogicalLineDesignImpl Repository Server LoginTicket Version PLMType PLM_ExternalID1 PLM_ExternalID2&quot;</em></pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>protocol://Host:port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>LoginTicket</th>
		<td>The string representing LoginTicket. Please refer [<a href="#References">2</a>].</td>
	</tr>
	<tr>
		<th>Version</th>
		<td>The V_Version attribute value of the reference to be opened.</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A PLMType for a PLM Reference or PLM Representation Reference.</td>
	</tr>
	<tr>
		<th>PLM_ExternalID1</th>
		<td>The value of the <code>PLM_ExternalID</code> attribute of the PLM 
		representation reference containing the data to create the user feature 
		reference. This is the ID of physical root product</td>
	</tr>
	<tr>
		<th>PLM_ExternalID2</th>
		<td>The value of the <code>PLM_ExternalID</code> attribute of the PLM 
		representation reference containing the data to create the user feature 
		reference. This is the ID of logical root product</td>
	</tr>
</table>

<p>* The input model is retrieved by importing the <strong>
LogicalLine_Root.3dxml</strong>
    file from the  <strong>CAAPipeTubeDesign.edu</strong> framework.
</p>
<p><code> 
InstallRootFolder\CAADoc\CAAPipeTubeDesign.edu\InputData\LogicalLine_Root.3dxml</code></p>

<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>

<p>This 3D XML file contains the root Product Reference with the following 
attributes:</p>

<ul>
  <li><a><code><strong>PLM_ExternalID1 (of type &#8220;Physical Product&#8221;)</strong></code></a>&nbsp;&nbsp;&nbsp;&nbsp; :
    <code>e.g <em>prd00000074-6B51DE90-0000-07B0-53E1C2520010EB80</em></code></li>
  <li><a><code><strong>PLM_ExternalID2(of type &#8220;Logical Reference&#8221;)</strong></code></a>&nbsp;&nbsp;&nbsp;&nbsp; :
    <code>e.g <em>log00000082_6B51DE90-0000-07B0-53E1C2520010EB80</em></code></li>
  <li><a><code><strong>PLMType</strong></code></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
    <code>VPMReference</code></li>
  <li><a><code><strong>Version</strong></code></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
    <code>A</code></li>

</ul>
<p>
  <strong>Important Note</strong>: The &quot;<em>Name</em>&quot; field shown in below image &quot;<em>Properties</em>&quot; dialog is now refered as attribute &quot;<em>PLM_ExternalID</em>&quot; for the product.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            Whenever user imports the <em>LogicalLine_Root.3dxml</em> the <em>PLM_ExternalID</em> value for PLM_ExternalID1 and PLM_ExternalID2
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            will be different as per user CATIA session, as it is generated by system automatically.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                           e.g In below image the values are shown:
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            PLM_ExternalID1 = <em>prd00000074-6B51DE90-0000-07B0-53E1C2520010EB80</em>
                       <br/>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            PLM_ExternalID2 = <em>log00000082_6B51DE90-0000-07B0-53E1C2520010EB80</em>
</p>
<p>
  <img alt="Sample Product" src="images/CAAPipLogicalLineDesignImpl.jpg"/>
</p>
<p>
    Please verify the &quot;PLM_ExtrenalID&quot; value shown in &quot;Name&quot; field carefully and assign these &quot;Name&quot; field values instead of &quot;PLM_ExternalID1&quot; and &quot;PLM_ExternalID2&quot;
    <br/> before executing the use case.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPipLogicalLineDesignImpl Code</h3>
<p>The CAAPipLogicalLineDesignImpl sample is made of a single class named 
CAAPipLogicalLineDesignImpl located in the CAAPipLogicalLineDesignImpl.m module 
of the CAAPipeTubeDesign.edu framework:
<code>InstallRootFolder\CAAPipeTubeDesign.edu\CAAPipLogicalLineDesignImpl.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes:</p>
<table class="fill">
	<tr>
		<td><em>CAAAdpCreateSession</em></td>
		<td>Class to create a batch session and connects to a repository.</td>
	</tr>	
	<tr>
		<td><em>CAAOpenPLMComponent</em></td>
		<td>Class to retrieve the Product Reference or Representation Reference 
		factory.</td>
	</tr>
	<tr>
		<td><em>CATIPrdOccurrenceMngt</em></td>
		<td>Class to create the root occurrence for the physical Root Product.</td>
	</tr>
	<tr>
		<td><em>CATAdpOpener</em></td>
		<td>Class to open the Logical Root Product.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first comment the Piping and Tubing environment and its 
components creation by looking at the code of the CAAPipLogicalLineDesignImpl . 
There are nine logical steps in CAAPipLogicalLineDesignImpl :</p>
<table class="fill">
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Checking the Input Data</a></td>
	</tr>	
	<tr>
		<td>2</td>
		<td><a href="#Step2">Creating a Session</a></td>
	</tr>	
	<tr>
		<td>3</td>
		<td><a href="#Step3">Querying/Opening/Expanding the Physical Reference 
		Product with its Associated Representation</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Querying/Opening/Expanding the Logical Reference 
		Product with its Associated Representation</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Navigating the List of Occurrences to Get the Instance and 
		Reference of Piping Logical Line</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Checking if the Current Occurrence Is a Logical Line 
		Instance Object and Getting its Reference Object</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Getting the Attributes of Logical Line from Logical 
		Line Reference</a></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Getting the List of Physical Components for that 
		Particular Logical Line Instance</a></td>
	</tr>	
	<tr>
		<td>9</td>
		<td><a href="#Step9">Disconnecting and Deleting the Session</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Input Data</h3>
<pre class="code">...
  //------------------------------------------------------------------
  // - The necessary input arguments to start CATIA session
  //------------------------------------------------------------------  
  if (8 != argc)
  {
    cout &lt;&lt; endl;
    cout &lt;&lt;&quot;CAAPipLogicalLineDesignImpl &lt;Repository&gt; &lt;Server&gt; &lt;LoginTicket&gt; &lt;Version&gt; &lt;PLMType&gt; &lt;PLM_ExternalID1&gt; &lt;PLM_ExternalID2&gt;&quot;&lt;&lt;endl;
    cout &lt;&lt;&quot;----------------------------------------------------------------------------------------------------------------------------------------&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;Repository:\t The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;Server:\t\t The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;LoginTicket:\t The string representing login ticket used for connection,\n\t\t expected format is hexadecimal format eg. 'ODg4NTMzNDY0NzIxNEIwRTk3MTUwM0ExNDAwNTc4QzN8VjE0fFYxNHx8fDB8'.&quot;&lt;&lt;endl;
    cout &lt;&lt;&quot;Version:\t The V_Version attribute value of the reference to be opened&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLMType:\t A PLM Type for PLM Reference or PLM Representation Reference &quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLM_ExternalID1: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed for Physical Structure.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLM_ExternalID2: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed for Logical Structure.&quot; &lt;&lt;endl;
    cout &lt;&lt; endl;
    retCode = 1;
    goto EscapeWay;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a Session</h3>
<p>We create a session.</p>
<pre class="code">...
  //------------------------------------------------------------------
  // - For Setting Repository
  //------------------------------------------------------------------
  cout &lt;&lt;endl&lt;&lt; &quot;Input parameters :&quot; &lt;&lt;endl;

  repository = argv[1];
  cout &lt;&lt; &quot;Repository \t\t = &quot; &lt;&lt; repository &lt;&lt;endl; // Repository

  //------------------------------------------------------------------
  // - For Setting Environment
  //------------------------------------------------------------------
  StrServer     = argv[2];    // Server
  StrLoginToken = argv[3];    // LoginTicket
  uVersion      = argv[4];    // Version
  StrPLMType    = argv[5];    // PLMType
  uPLMID        = argv[6];    // PLM_ExternalID1
  uPLMIDLog     = argv[7];    // PLM_ExternalID2

  cout &lt;&lt; &quot;Server \t\t\t = &quot; &lt;&lt; StrServer &lt;&lt;endl;
  cout &lt;&lt; &quot;Login Token \t\t = &quot; &lt;&lt; StrLoginToken &lt;&lt;endl;
  cout &lt;&lt; &quot;Version (V_Version) \t = &quot; &lt;&lt; uVersion.ConvertToChar() &lt;&lt; endl ;
  cout &lt;&lt; &quot;PLMType \t\t = &quot; &lt;&lt; StrPLMType &lt;&lt; endl ;
  cout &lt;&lt; &quot;PLM_ExternalID1 (Physical) = &quot; &lt;&lt; uPLMID.ConvertToChar() &lt;&lt; endl ;
  cout &lt;&lt; &quot;PLM_ExternalID2 (Logical)  = &quot; &lt;&lt; uPLMIDLog.ConvertToChar() &lt;&lt; endl ;
  cout&lt;&lt; endl;

  // -----------------------------------------------------------------
  // Create Session
  // -----------------------------------------------------------------
  hr = ::CAAAdpCreateSession(repository, StrServer, StrLoginToken);
  if (FAILED(hr)) { retCode = 2; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Querying/Opening/Expanding the Physical Reference 
Product with its Associated Representation</h3>
<p>Retrieve the customized Reference of the Product modeler.</p>
<pre class="code">...
  // Open a Product inside a Bag for complete control of its lifecycle
  CATOmbLifeCycleRootsBag myBag; /* To handle PLM entity life-cycle */

  //-----------------------------------------------------------------------
  // Open and Expand of the product
  //-----------------------------------------------------------------------
  //---------------------------------------------------
  // - Opens the &quot;Piping and Tubing&quot; model
  // The input model is retrieved by importing the Lt.3dxml file from the CAAPipeTubeDesign.edu fw
  // This 3D XML file contains the 2 root Product Reference with the following attributes:
  //     * PLM_ExternalID1 [uPLMID]   : Physical Product
  //     * PLM_ExternalID2 [uPLMIDLog]: Logical Reference
  //---------------------------------------------------
  hr = ::CAAOpenPLMComponent(StrPLMType, uPLMID, uVersion, IID_CATIPLMNavReference, (void**) &amp; pIPLMNavRefPhysRoot, myBag,TRUE);
  if ((FAILED(hr)) || (NULL == pIPLMNavRefPhysRoot)) { retCode = 3; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Querying/Opening/Expanding the Logical Reference Product 
with its Associated Representation</h3>
<p>We are opening logical reference product.</p>
<pre class="code">...
  //Try to open the logical Root
  hr = CATCkePLMNavPublicServices::RetrieveKnowledgeType(&quot;RFLVPMLogicalReference&quot;, hTypeModeler);
  if( (FAILED(hr)) || (NULL_var == hTypeModeler) ) { retCode = 4; goto EscapeWay; }

  uPLMIDLog = argv[9];
  attributeSet.AddAttribute(&quot;PLM_ExternalID&quot;, uPLMIDLog);

  hr = CATAdpPLMQueryServices::GetElementsFromAttributes(hTypeModeler, attributeSet, ListP_QueryResults) ;
  if( (FAILED(hr)) || (0 &gt;= ListP_QueryResults.Size() ) ) { retCode = 5; goto EscapeWay; }

  if(1 &lt;= ListP_QueryResults.Size())
  {
    pQueryResult = ListP_QueryResults[1] ;
    if(NULL != pQueryResult)
    {
      hr = pQueryResult-&gt;GetIdentifier(pIPLMIdent) ;
    }
  }
  if( NULL == pIPLMIdent ) { retCode = 6; goto EscapeWay; }

  hr = adpOpener.CompleteAndOpen(pIPLMIdent,IID_CATIPLMNavReference, (void**) &amp;pIPLMNavLogRef);
  if ((FAILED(hr)) || (NULL == pIPLMNavLogRef)) { retCode = 7; goto EscapeWay; }

  myBag.InsertRoot(pIPLMNavLogRef);
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Navigating the List of Occurrences to Get the Instance and 
Reference of Piping Logical Line</h3>
<pre class="code">...
  hr = pIPLMNavLogRef-&gt;ListChildren(ListChildren, 1, &amp;coreTypeInst);
  if( (FAILED(hr)) || (0 &gt;= ListChildren.Size()) ) { retCode = 8; goto EscapeWay; }

  for( indexEntity = 1; indexEntity &lt;= ListChildren.Size(); indexEntity++)
  {
    ListAttrNames.RemoveAll();

    SizeList = ListPartsOfLogicalLine.Size();
    for( index =1; index &lt;= SizeList; index++ )
    {
      pIUnkMemberOfLogLine = ListPartsOfLogicalLine[index];
      if( NULL != pIUnkMemberOfLogLine ){ pIUnkMemberOfLogLine-&gt;Release() ; pIUnkMemberOfLogLine = NULL ; }    
    }
    ListPartsOfLogicalLine.RemoveAll() ;

    if( NULL != pILogLineRef) { pILogLineRef-&gt;Release(); pILogLineRef = NULL; }  

    pIPLMNavEntity = ListChildren[indexEntity];
    if(NULL == pIPLMNavEntity) { retCode = 9; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Checking if the Current Occurrence Is a Logical Line 
Instance Object and Getting its Reference Object</h3>
<p>We assign CATIPLMNavOccurrence pointer to Piping logical line instance smart 
pointer.</p>
<pre class="code">... 
    hLogLineInstance = pIPLMNavEntity; 
    if(NULL_var != hLogLineInstance)
    {
      hr = hLogLineInstance-&gt;GetReference(pILogLineRef);
      if( (FAILED(hr)) || (NULL == pILogLineRef) ) { retCode = 10; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Getting the Attributes of Logical Line from Logical 
Line Reference</h3>
<p>We use CATIPipAttrAccess interface to get Piping logical line properties 
attributes.</p>
<pre class="code">...
      hAttrAccess = pILogLineRef;
      if(NULL_var == hAttrAccess) { retCode = 11; goto EscapeWay; } 

      hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
      if( (FAILED(hr)) || (1 &gt; ListAttrNames.Size()) ) { retCode = 12; goto EscapeWay; }

      sizeListAttrNames = ListAttrNames.Size();

      cout &lt;&lt; endl &lt;&lt; &quot;Logical Line Properties : &quot;;
      cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
      cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value  &quot;;

      for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
      {
        if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

        uAttrName = ListAttrNames[iListIndex];
        if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 13; goto EscapeWay; }

        hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
        if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 14; goto EscapeWay; }

        uAttrValue = pIAttrValue-&gt;Show();

        cout&lt;&lt; endl &lt;&lt; uAttrName.ConvertToChar() &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue.ConvertToChar();
      }      
      cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
      // end of the  List of Attributes and its values of logical line
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Getting the List of Physical Components for that 
Particular Logical Line Instance</h3>
<pre class="code">...
      hr = hLogLineInstance-&gt;GetPhysicalParts(ListPartsOfLogicalLine);
      if(FAILED(hr)) { retCode = 15; goto EscapeWay; }

      //There is ONLY 1 Line in the test model and it links to only 2 phsical parts - hence hard coded test...
      if( 2 != ListPartsOfLogicalLine.Size() ){ retCode = 16; goto EscapeWay; }
    }
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Disconnecting and Deleting the Session</h3>
<p>We delete the session and disconnect from the database.</p>
<pre class="code">...
  myBag.RemoveAll(); /* PLM entities life-cycle */

  hr = CAAAdpCloseSession();
  if (FAILED(hr)) 
  {
    cout &lt;&lt; &quot;The SESSION is not Closed&quot;&lt;&lt;endl;
    retCode = 17;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to access, use and navigate the 
logical line.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
			<a href="../CAADocUseCases/CAADocRunSample.htm"> Building and Launching a Use Case</a>
		</td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
			<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcBasicBatch.htm'); return false;"> Connecting to V6 Server</a>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="history"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Apr 2012]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
