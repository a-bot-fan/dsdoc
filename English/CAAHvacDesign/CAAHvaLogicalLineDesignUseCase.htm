<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="topictype" content="Uc" />
<meta name="devlang" content="cpp" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Retrieving Information of Logical Line, its Access and Navigation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Retrieving Information of Logical Line, its Access 
		and Navigation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes the CAAHvaLogicalLineDesignImpl use case. This use 
		case explains how to use, access and navigate logical line objects and their 
		parameters.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAHvaLogicalLineDesignImpl Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAHvaLogicalLineDesignImpl Do</a></li>
				<li><a href="#How">How to Launch CAAHvaLogicalLineDesignImpl</a></li>
				<li><a href="#Where">Where to Find the CAAHvaLogicalLineDesignImpl Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you first steps in programming with
CATIA &quot;Heating Ventilation & Air Conditioning&quot;(HVAC) Interfaces.
		<br/>
			Its main intent is to provide you information about using, accessing and navigating logical line objects and their parameters.
 </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAHvaLogicalLineDesignImpl Use Case</h2>
<p>CAAHvaLogicalLineDesignImpl is a use case of the CAAHvacDesign.edu framework that illustrates CATIA &quot;Heating Ventilation & Air Conditioning&quot;(HVAC) framework
capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAHvaLogicalLineDesignImpl Do</h3>
<p>The goal of CAAHvaLogicalLineDesignImpl use case is to demostrate how to use and navigate 
logical line objects and how to access its parameters.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAHvaLogicalLineDesignImpl</h3>
<p>To launch CAAHvaLogicalLineDesignImpl, you will need to set up the build time environment, then 
compile CAAHvaLogicalLineDesignImpl along with its prerequisites, set up the run time environment, 
and then execute the use case.</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;CAAHvaLogicalLineDesignImpl Repository Server LoginTicket Version PLMType PLM_ExternalID1 PLM_ExternalID2&quot;</em></pre>
<p>where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>protocol://Host:port_number/RootURI</em></td>
	</tr>
	<tr>
    <th>LoginTicket</th>
    <td>The string representing LoginTicket. Please refer [<a href="#References">2</a>].</td>
  </tr>
	<tr>
		<th>Version</th>
		<td>The V_Version attribute value of the reference to be opened.</td>
	</tr>
	<tr>
		<th>PLMType </th>
		<td>A PLMType for a PLM Reference or PLM Representation Reference.</td>
	</tr>
	<tr>
		<th>PLM_ExternalID1</th>
		<td>The value of the <code>PLM_ExternalID</code> attribute of the PLM representation 
		reference containing the data to create the user feature reference. This is the ID of physical root product</td>
	</tr>
	<tr>
		<th>PLM_ExternalID2</th>
		<td>The value of the <code>PLM_ExternalID</code> attribute of the PLM representation 
		reference containing the data to create the user feature reference. This is the ID of logical root product</td>
	</tr>
</table>

<p>* The input model is retrieved by importing 3dxml file from the 
   <strong>CAAHvacDesign.edu</strong> framework as below :<br />&nbsp;&nbsp;
   <strong>HvacDesignSampleData.3dxml</strong> for HVAC product Data<br />&nbsp;&nbsp;
   <strong>HvacDesignSampleResourceSet.3dxml</strong> for PRM Data Resource set<br />&nbsp;&nbsp;
   <br/>&nbsp;
   <code>InstallRootDirectory\CAAHvacDesign.edu\InputData\HvacDesignSampleData.3dxml
   <br/>&nbsp;InstallRootDirectory\CAAHvacDesign.edu\InputData\HvacDesignSampleResourceSet.3dxml
   </code>
</p>

<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>

<p>This 3D XML file contains the Root Product Reference with the
following attributes:</p>

<ul>
  <li><a><code><strong>PLM_ExternalID1 (of type &#8220;Physical Product&#8221;)</strong></code></a>&nbsp;&nbsp;&nbsp;:
    <code>e.g <em>prd00000266-6B51DE90-0000-07B0-53E1C2520010EB80</em></code></li>
  <li><a><code><strong>PLM_ExternalID2 (of type &#8220;Logical Reference&#8221;)</strong></code></a> :
    <code>e.g <em>log00000264_6B51DE90-0000-07B0-53E1C2520010EB80</em></code></li>
  <li><a><code><strong>PLMType</strong></code></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
    <code>VPMReference</code></li>
  <li><a><code><strong>Version</strong></code></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
    <code>A</code></li>
</ul>

<p>
  <strong>Important Note</strong>: The &quot;<em>Name</em>&quot; field shown in below image &quot;<em>Properties</em>&quot; dialog is now refered as attribute &quot;<em>PLM_ExternalID</em>&quot; for the product.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            Whenever user imports the <em>HvacDesignSampleData.3dxml</em> the <em>PLM_ExternalID</em> value for PLM_ExternalID1 and PLM_ExternalID2
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            will be different as per user CATIA session, as it is generated by system automatically.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                           e.g In below image the values are shown:
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            PLM_ExternalID1 = <em>prd00000022-6B51DE90-0000-07B0-53E1C2520010EB80</em>
                       <br/>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            PLM_ExternalID2 = <em>log00000030_6B51DE90-0000-07B0-53E1C2520010EB80</em>
</p>
<p>
  <img width="100%" alt="Sample Product" src="images/CAAHvacDesignSampleData.jpg"/>
</p>
<p>
    Please verify the &quot;PLM_ExtrenalID&quot; value shown in &quot;Name&quot; field carefully and assign these &quot;Name&quot; field values instead of &quot;PLM_ExternalID1&quot; and &quot;PLM_ExternalID2&quot;
    <br />executing the use case.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAHvaLogicalLineDesignImpl Code</h3>
<p>The CAAHvaLogicalLineDesignImpl use case is made of several classes/a single file located in the 
CAAHvaLogicalLineDesignImpl.m module of the CAAHvacDesign.edu framework: <code>InstallRootFolder\CAADoc\CAAHvacDesign.edu\CAAHvaLogicalLineDesignImpl.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes:</p>
<table>
  <tr>
    <td><em>CAAAdpCreateSession</em></td>
    <td>Class to create a batch session and connects to a repository.</td>
  </tr>
  <tr>
    <td><em>CAAOpenPLMComponent</em></td>
    <td>Class to retrieve the Product Reference or Representation Reference.</td>
  </tr>
  <tr>
    <td><em>CATAdpOpener</em></td>
    <td>Class to open the Logical Root Product.</td>
  </tr>
  <tr>
    <td><em>CATIPrdOccurrenceMngt</em></td>
    <td>Class to create the root occurrence for the Root Product.
    factory.</td>
  </tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first comment the &quot;Heating Ventilation & Air Conditioning&quot;(HVAC) environment and its components 
creation by looking at the code <br/> of the CAAHvaLogicalLineDesignImpl. There are 9 logical steps in CAAHvaLogicalLineDesignImpl :
</p>
<ol>
	<li><a href="#Step1">Checking the Input Data</a></li>
	<li><a href="#Step2">Creating a Session</a></li>
	<li><a href="#Step3">Querying/Opening/Expanding the Physical Reference Product with its Associated Representation</a></li>
	<li><a href="#Step4">Querying/Opening/Expanding the Logical Reference Product with its Associated Representation</a></li>
	<li><a href="#Step5">Navigate the list of occurrences to get the instance and reference of hvac logical line</a></li>
	<li><a href="#Step6">Checking if the current occurrence is Hvac logical line instance object and get its reference object</a></li>
	<li><a href="#Step7">Get the attributes of Hvac logical line from Hvac logical line reference</a></li>
	<li><a href="#Step8">Get the list of Physical components for that particular logical line instance</a></li>
	<li><a href="#Step9">Disconnecting and Deleting the Session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Input Data</h3>
<pre class="code">...
  //------------------------------------------------------------------
  // - The necessary input arguments to start CATIA session
  //------------------------------------------------------------------  
  if( 8 != argc )
  {
      cout &lt;&lt; endl;
      cout &lt;&lt;&quot;CAAHvaLogicalLineDesignImpl &lt;Repository&gt; &lt;Server&gt; &lt;LoginTicket&gt; &lt;Version&gt; &lt;PLMType&gt; &lt;PLM_ExternalID1&gt; &lt;PLM_ExternalID2&gt;&quot;&lt;&lt;endl;
      cout &lt;&lt;&quot;----------------------------------------------------------------------------------------------------------------------------------------&quot; &lt;&lt;endl;
      cout &lt;&lt;&quot;Repository:\t The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
      cout &lt;&lt;&quot;Server:\t\t The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
      cout &lt;&lt;&quot;LoginTicket:\t The string representing login ticket used for connection,\n\t\t expected format is hexadecimal format eg. 'ODg4NTMzNDY0NzIxNEIwRTk3MTUwM0ExNDAwNTc4QzN8VjE0fFYxNHx8fDB8'.&quot;&lt;&lt;endl;
      cout &lt;&lt;&quot;Version:\t The V_Version attribute value of the reference to be opened.&quot; &lt;&lt;endl;
      cout &lt;&lt;&quot;PLMType:\t A PLM Type String for PLM Reference or PLM Representation Reference.&quot; &lt;&lt;endl;
      cout &lt;&lt;&quot;PLM_ExternalID1: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed for Physical Structure.&quot; &lt;&lt;endl;
      cout &lt;&lt;&quot;PLM_ExternalID2: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed for Logical Structure.&quot; &lt;&lt;endl;
      cout &lt;&lt; endl;
      retCode = 1;
      goto EscapeWay;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a Session</h3>
<p>We create a session.</p>
<pre class="code">...
  //------------------------------------------------------------------
  // - For Setting Repository
  //------------------------------------------------------------------
  cout &lt;&lt;endl&lt;&lt; &quot;Input parameters :&quot; &lt;&lt;endl;

  repository = argv[1];
  cout &lt;&lt; &quot;Repository \t\t = &quot; &lt;&lt; repository &lt;&lt;endl; // Repository

  //------------------------------------------------------------------
  // - For Setting Environment
  //------------------------------------------------------------------
  StrServer     = argv[2];    // Server
  StrLoginToken = argv[3];    // LoginTicket
  uVersion      = argv[4];    // Version
  StrPLMType    = argv[5];    // PLMType
  uPLMID        = argv[6];    // PLM_ExternalID1
  uPLMIDLog     = argv[7];    // PLM_ExternalID2

  cout &lt;&lt; &quot;Server \t\t\t = &quot; &lt;&lt; StrServer &lt;&lt;endl;
  cout &lt;&lt; &quot;Login Token \t\t = &quot; &lt;&lt; StrLoginToken &lt;&lt;endl;
  cout &lt;&lt; &quot;Version (V_Version) \t = &quot; &lt;&lt; uVersion.ConvertToChar() &lt;&lt; endl ;
  cout &lt;&lt; &quot;PLMType \t\t = &quot; &lt;&lt; StrPLMType &lt;&lt; endl ;
  cout &lt;&lt; &quot;PLM_ExternalID1 (Physical) = &quot; &lt;&lt; uPLMID.ConvertToChar() &lt;&lt; endl ;
  cout &lt;&lt; &quot;PLM_ExternalID2 (Logical)  = &quot; &lt;&lt; uPLMIDLog.ConvertToChar() &lt;&lt; endl ;
  cout&lt;&lt; endl;

  // -----------------------------------------------------------------
  // Create Session
  // -----------------------------------------------------------------
  hr = ::CAAAdpCreateSession(repository, StrServer, StrLoginToken);
  if (FAILED(hr)) { retCode = 2; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Querying/Opening/Expanding the Physical Reference Product with its Associated Representation</h3>
<p>Retrieve the customized reference of the product modeler</p>
<pre class="code">...
  //-----------------------------------------------------------------------
  // Open and Expand of the product
  //-----------------------------------------------------------------------
  
  // - Opens the &quot;HVAC (Heating Ventilation & Air Conditioning)&quot; model in New Unified Typing Mode
  // The input model is retrieved by importing the file from the CAAHvacDesign.edu fw are
  // HvacDesignSampleData.3dxml for HVAC product and HvacDesignSampleResourceSet.3dxml for PRM Data Resource set
  // This 3D XML file contains the 2 root Product Reference with the following attributes:
  //     * PLM_ExternalID1 [uPLMID]   : Physical Product  (HVAC_Physical_Root)
  //     * PLM_ExternalID2 [uPLMIDLog]: Logical Reference (Logical_Root)
  //---------------------------------------------------
  hr = ::CAAOpenPLMComponent(StrPLMType, uPLMID, uVersion, IID_CATIPLMNavReference, (void**) &amp; pIPLMNavRefPhysRoot, myBag,TRUE);
  if ((FAILED(hr)) || (NULL == pIPLMNavRefPhysRoot)) { retCode = 3; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Querying/Opening/Expanding the Logical Reference Product with its 
Associated Representation</h3>
<p>We are opening logical refrence product</p>
<pre class="code">...
  //Try to open the logical Root
  hr = CATCkePLMNavPublicServices::RetrieveKnowledgeType(&quot;RFLVPMLogicalReference&quot;, hTypeModeler);
  if( (FAILED(hr)) || (NULL_var == hTypeModeler) ) { retCode = 4; goto EscapeWay; }

  attributeSet.AddAttribute(&quot;PLM_ExternalID&quot;, uPLMIDLog);

  hr = CATAdpPLMQueryServices::GetElementsFromAttributes(hTypeModeler, attributeSet, ListP_QueryResults) ;
  if( (FAILED(hr)) || (0 &gt;= ListP_QueryResults.Size() ) ) { retCode = 5; goto EscapeWay; }

  if(1 &lt;= ListP_QueryResults.Size())
  {
    pQueryResult = ListP_QueryResults[1] ;
    if(NULL != pQueryResult)
    {
      hr = pQueryResult-&gt;GetIdentifier(pIPLMIdent) ;
    }
  }
  if( NULL == pIPLMIdent ) { retCode = 6; goto EscapeWay; }

  hr = adpOpener.CompleteAndOpen(pIPLMIdent,IID_CATIPLMNavReference, (void**) &pIPLMNavLogRef);
  if ((FAILED(hr)) || (NULL == pIPLMNavLogRef)) { retCode = 7; goto EscapeWay; }

  myBag.InsertRoot(pIPLMNavLogRef);
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Navigate the list of occurrences to get the instance 
and reference of hvac logical line</h3>
<pre class="code">...
  hr = pIPLMNavLogRef-&gt;ListChildren(ListChildren, 1, &coreTypeInst);
  if( (FAILED(hr)) || (0 &gt;= ListChildren.Size()) ) { retCode = 8; goto EscapeWay; }

  for( indexEntity = 1; indexEntity &lt;= ListChildren.Size(); indexEntity++)
  {
    ListAttrNames.RemoveAll();

    SizeList = ListPartsOfLogicalLine.Size();
    for( index =1; index &lt;= SizeList; index++ )
    {
      pIUnkMemberOfLogLine = ListPartsOfLogicalLine[index];
      if( NULL != pIUnkMemberOfLogLine ){ pIUnkMemberOfLogLine-&gt;Release() ; pIUnkMemberOfLogLine = NULL ; }    
    }
    ListPartsOfLogicalLine.RemoveAll() ;

    if( NULL != pILogLineRef) { pILogLineRef-&gt;Release(); pILogLineRef = NULL; }  

    pIPLMNavEntity = ListChildren[indexEntity];
    if(NULL == pIPLMNavEntity) { retCode = 9; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Checking if the current occurrence is Hvac logical line instance object 
and get its reference object</h3>
<p>We assign CATIPLMNavOccurrence pointer to HVAC logical line instance smart pointer</p>
<pre class="code">...
  hLogLineInstance = pIPLMNavEntity; 
  if(NULL_var != hLogLineInstance)
  {
    hr = hLogLineInstance-&gt;GetReference(pILogLineRef);
    if( (FAILED(hr)) || (NULL == pILogLineRef) ) { retCode = 10; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Get the attributes of Hvac logical line from Hvac logical line reference</h3>
<p>We use CATIHvaAttrAccess interface to get Hvac logical line properties attributes</p>
<pre class="code">...
  hAttrAccess = pILogLineRef;
  if(NULL_var == hAttrAccess) { retCode = 11; goto EscapeWay; } 

  hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
  if( (FAILED(hr)) || (1 &gt; ListAttrNames.Size()) ) { retCode = 12; goto EscapeWay; }

  sizeListAttrNames = ListAttrNames.Size();

  cout &lt;&lt; endl &lt;&lt; &quot;Logical Line Properties : &quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value  &quot;;

  for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
  {
    if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

    uAttrName = ListAttrNames[iListIndex];
    if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 13; goto EscapeWay; }

    hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
    if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 14; goto EscapeWay; }

    uAttrValue = pIAttrValue-&gt;Show();

    cout&lt;&lt; endl &lt;&lt; uAttrName.ConvertToChar() &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue.ConvertToChar();
  }      
  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
  // end of the  List of Attributes and it's values of logical line
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Get the list of Physical components for that particular logical line instance</h3>
<pre class="code">... 
      hr = hLogLineInstance->GetPhysicalParts(ListPartsOfLogicalLine);
      if(FAILED(hr)) { retCode = 15; goto EscapeWay; }

      //There is at least 1 part in each HVAC Line in the test model - hence hard coded test...
      if( 0 >= ListPartsOfLogicalLine.Size() ){ retCode = 16; goto EscapeWay; }
    }
  }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Disconnecting and Deleting the Session</h3>
<p>We delete the session and disconnect from the database</p>
<pre class="code">...
  myBag.RemoveAll(); /* PLM entities life-cycle */
  ListAttrNames.RemoveAll();

  //-------------------------------------
  //- Disconnect and Delete session
  //-------------------------------------
  hr = ::CAAAdpCloseSession();
  if (FAILED(hr)) 
  {
    cout &lt;&lt; &quot;The SESSION is not Closed&quot;&lt;&lt;endl;
    retCode = 17;
  }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to access, use and navigate the Hvac logical line.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
			<a href="../CAADocUseCases/CAADocRunSample.htm"> Building and Launching a Use Case</a>
		</td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
			<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcBasicBatch.htm'); return false;"> Connecting to V6 Server</a>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Apr 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
