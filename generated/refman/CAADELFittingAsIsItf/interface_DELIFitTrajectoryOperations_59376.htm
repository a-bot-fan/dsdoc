<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CAADELFittingAsIsItf Interface DELIFitTrajectoryOperations</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CAADELFittingAsIsItf.htm" href="../CAADELFittingAsIsItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CAADELFittingAsIsItf";	}
		function getCurrentObjectName() { 
 	return "DELIFitTrajectoryOperations"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CAADELFittingAsIsItf Interface DELIFitTrajectoryOperations</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_DELIFitTrajectoryOperations_59376','DELIFitTrajectoryOperations','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>DELIFitTrajectoryOperations</b>
</p>
<p>
<b><i> Interface to manipulate Operations on FITTrack.</i></b><br>

 <b>Role</b>: allows you to Reverse/Split/Transform a FITTrack.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Reverse()"><b>Reverse</b></a>()
<dd>  Reverses the Trajectory.
 <dt> o 
    <a href="#Split(int,DELIFitTrajectory_var&amp;,DELIFitTrajectory_var&amp;,boolean)"><b>Split</b></a>(int,DELIFitTrajectory_var&amp;,DELIFitTrajectory_var&amp;,boolean)
<dd>  Splits a Trajectory at a TPoint and provides the two tracks created by split.
 <dt> o 
    <a href="#Transform(CATMathTransformation&amp;,CATBoolean)"><b>Transform</b></a>(CATMathTransformation&amp;,CATBoolean)
<dd>  Applies a geometrical transformation to the Trajectory.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Reverse"></a><a name="Reverse()"></a> <dt> o <b>Reverse</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Reverse</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Reverses the Trajectory.
   Reverses the order of the TPoint (and any data linked to each TPoint).  It also moves
   the duration values so they are stored on the TPoint that ends each segment.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    <b>Legal values</b>:
      <ul>
      <li>S_OK         : The object has been retrieved. </li> 
      <li>E_ABORT      : No father found. </li>
      <li>E_FAIL       : An error has occured.</li>
      </ul>
</dl>
</dl>
<a name="Split"></a><a name="Split(int,DELIFitTrajectory_var&amp;,DELIFitTrajectory_var&amp;,boolean)"></a> <dt> o <b>Split</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Split</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iTPointIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIFitTrajectory_var','DELIFitTrajectory_var&amp;')</script> <td><tt>o_FirstSplitTrack</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIFitTrajectory_var','DELIFitTrajectory_var&amp;')</script> <td><tt>o_SecondSplitTrack</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iKeepTPoint</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Splits a Trajectory at a TPoint and provides the two tracks created by split.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTPointIndex</tt>
   <dd>    The TPoint position where to split the Trajectory.
    The value of iTPointIndex must be between 1 and (Number of TPoints-1),
	 otherwise, the API will FAIL.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <b>Legal values</b>:
      <ul>
      <li>S_OK         : The object has been split. </li>
      <li>E_FAIL       : An error has occurred.</li>
      </ul>
</dl>
</dl>
<a name="Transform"></a><a name="Transform(CATMathTransformation&amp;,CATBoolean)"></a> <dt> o <b>Transform</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Transform</b>(<td> const <script type="text/javascript"> activateLink('CATMathTransformation','CATMathTransformation&amp;')</script> <td><tt>iTransfo</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>ibUpdatePartOffsets</tt><td><tt>=TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Applies a geometrical transformation to the Trajectory.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTransform</tt>
   <dd>    The transformation to apply.
 </dd>
    <dt><tt> iUpdatePartOffsets</tt>
   <dd>     If TRUE, moving object offsets will be updated to include the applied transformation.
       The starting positions of the moving objects will not move with the trajectory and
       the moving objects will retain their starting positions relative to the world.
     If FALSE, moving object offsets will be unaffected.  The starting positions of the
       moving objects will move with the trajectory and the moving objects will retain their
       starting positions relative to trajectory path.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <b>Legal values</b>:
      <ul>
      <li>S_OK         : The object has been correctly transformed. </li> 
      <li>E_INVALIDARG : Invalid input.</li>
      <li>E_FAIL       : An error has occured.</li>
      </ul>
</dl>
</dl>
<hr>
 This object is included in the file: <b>DELIFitTrajectoryOperations.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CAADELFittingAsIsItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

