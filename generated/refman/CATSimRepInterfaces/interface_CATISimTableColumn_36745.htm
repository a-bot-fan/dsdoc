<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATSimRepInterfaces Interface CATISimTableColumn</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATSimRepInterfaces.htm" href="../CATSimRepInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATSimRepInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATISimTableColumn"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATSimRepInterfaces Interface CATISimTableColumn</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATISimTableColumn_36745','CATISimTableColumn','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATISimTableColumn</b>
</p>
<p>
<b><i> Interface to manage table column data.</i></b><br>

 Row numbers starts with 1.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetCellData(int,double&amp;)"><b>GetCellData</b></a>(int,double&amp;)
<dd>  Retrieves the specified cell data.
 <dt> o 
    <a href="#GetData(CATListOfDouble&amp;)"><b>GetData</b></a>(CATListOfDouble&amp;)
<dd>  Retrieves data for the column.
 <dt> o 
    <a href="#GetEmptyCellFlag(int,CATBoolean&amp;)"><b>GetEmptyCellFlag</b></a>(int,CATBoolean&amp;)
<dd>  Retrieves the flag that determines whether the cell is empty.
 <dt> o 
    <a href="#GetNumberOfRows(int&amp;)"><b>GetNumberOfRows</b></a>(int&amp;)
<dd>  Retrieves the number of rows in the column.
 <dt> o 
    <a href="#SetCellData(int,double)"><b>SetCellData</b></a>(int,double)
<dd>  Sets the specified cell data.
 <dt> o 
    <a href="#SetData(CATListOfDouble&amp;)"><b>SetData</b></a>(CATListOfDouble&amp;)
<dd>  Sets  data for the column.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetCellData"></a><a name="GetCellData(int,double&amp;)"></a> <dt> o <b>GetCellData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCellData</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRow</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oValue</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the specified cell data.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRow</tt>
   <dd> [in]    The row number (Starting from 1).
 </dd>
    <dt><tt> oValue</tt>
   <dd> [out]   The value stored in the cell. oValue will be an invalid value if the cell is empty.
   Use the GetEmptyCellFlag method prior to using this method.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if successful.
</dl>
</dl>
<a name="GetData"></a><a name="GetData(CATListOfDouble&amp;)"></a> <dt> o <b>GetData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetData</b>(<td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>oValues</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves data for the column. This method gives better performance than calling GetCellData on each cell within a column.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oValues</tt>
   <dd> [out]   The data in the column. Invalid value will be present in the data if there are blank cells in the specified column.
   Use the GetEmptyCellsInTableFlag method prior to using this method.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if successful.
</dl>
</dl>
<a name="GetEmptyCellFlag"></a><a name="GetEmptyCellFlag(int,CATBoolean&amp;)"></a> <dt> o <b>GetEmptyCellFlag</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetEmptyCellFlag</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRow</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oEmptyCellFlag</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the flag that determines whether the cell is empty.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRow</tt>
   <dd> [in]   The row number (Starting from 1).
 </dd>
    <dt><tt> oEmptyCellFlag</tt>
   <dd> [out]   This boolean will be <code>TRUE</code> if the cell is empty, <code>FALSE</code> otherwise.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if successful.
</dl>
</dl>
<a name="GetNumberOfRows"></a><a name="GetNumberOfRows(int&amp;)"></a> <dt> o <b>GetNumberOfRows</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNumberOfRows</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNumRows</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the number of rows in the column.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNumRows</tt>
   <dd> [out]   The number of rows in the coulumn.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if successful.
</dl>
</dl>
<a name="SetCellData"></a><a name="SetCellData(int,double)"></a> <dt> o <b>SetCellData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetCellData</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRow</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the specified cell data.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRow</tt>
   <dd> [in]   The row number (Starting from 1). The row number can be between 1 to the current number of rows + 1, the current number of rows
 will be returned by the method GetNumberOfRows(). If the row number is current number of rows + 1 then a new row is inserted at that position
 using InsertRow().
 </dd>
    <dt><tt> iValue</tt>
   <dd> [in]   The value to be stored in the cell.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if successful.
</dl>
</dl>
<a name="SetData"></a><a name="SetData(CATListOfDouble&amp;)"></a> <dt> o <b>SetData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetData</b>(<td> const <script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>iValues</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets  data for the column. This method gives better performance than calling SetCellData on each cell within a column.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValues</tt>
   <dd> [in]   The data in the column.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if successful.
   <code>E_INVALIDARG</code> if length of the supplied iValues does not match the number of rows in the table.
   <code>E_FAIL</code> if failed .
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATISimTableColumn.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATSimRepInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

