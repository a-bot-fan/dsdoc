<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DELPPRAuthFoundationInterfaces Interface DELIPPRSystemOrOperationOutputCompute</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DELPPRAuthFoundationInterfaces.htm" href="../DELPPRAuthFoundationInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DELPPRAuthFoundationInterfaces";	}
		function getCurrentObjectName() { 
 	return "DELIPPRSystemOrOperationOutputCompute"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DELPPRAuthFoundationInterfaces Interface DELIPPRSystemOrOperationOutputCompute</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_DELIPPRSystemOrOperationOutputCompute_118920','DELIPPRSystemOrOperationOutputCompute','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>DELIPPRSystemOrOperationOutputCompute</b>
</p>
<p>
<b><i> </i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Perform(CATIPLMNavOccurrence*,DELIPPRSystemOrOperationOutputCompute::eStructureMode,DELIPPRSystemOrOperationOutputCompute::eReplacementMode&amp;,CATBoolean,DELIPPRSystemOrOperationOutputCompute::eOutputPerformDiag&amp;)"><b>Perform</b></a>(CATIPLMNavOccurrence*,DELIPPRSystemOrOperationOutputCompute::eStructureMode,DELIPPRSystemOrOperationOutputCompute::eReplacementMode&amp;,CATBoolean,DELIPPRSystemOrOperationOutputCompute::eOutputPerformDiag&amp;)
<dd> 
 <br><b>Role</b>: replace or update system or operation Ouput
 
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#eOutputPerformDiag"><b>eOutputPerformDiag</b></a>
<dd>   Defines a diagnostic after Perform
 
 
 <dt> o 
    <a href="#eReplacementMode"><b>eReplacementMode</b></a>
<dd>   Defines a replacement mode.
 <dt> o 
    <a href="#eStructureMode"><b>eStructureMode</b></a>
<dd>   Defines an output structure mode.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Perform"></a><a name="Perform(CATIPLMNavOccurrence*,DELIPPRSystemOrOperationOutputCompute::eStructureMode,DELIPPRSystemOrOperationOutputCompute::eReplacementMode&amp;,CATBoolean,DELIPPRSystemOrOperationOutputCompute::eOutputPerformDiag&amp;)"></a> <dt> o <b>Perform</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Perform</b>(<td><script type="text/javascript"> activateLink('CATIPLMNavOccurrence','CATIPLMNavOccurrence*')</script> <td><tt>ipSystemOrOperationOccurrence</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIPPRSystemOrOperationOutputCompute::eStructureMode','DELIPPRSystemOrOperationOutputCompute::eStructureMode')</script> <td><tt>ieStructureMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIPPRSystemOrOperationOutputCompute::eReplacementMode','DELIPPRSystemOrOperationOutputCompute::eReplacementMode&amp;')</script> <td><tt>ieReplacementMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>ibForceLoad</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIPPRSystemOrOperationOutputCompute::eOutputPerformDiag','DELIPPRSystemOrOperationOutputCompute::eOutputPerformDiag&amp;')</script> <td><tt>oeOutputPerformDiag</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>

 <br><b>Role</b>: replace or update system or operation Ouput
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipSystemOrOperationOccurrence</tt>
   <dd> 
 </dd>
    <dt><tt> &ieStructureMode</tt>
   <dd>         Simple : Output will contain at most one input node
		  Multiple:Output could contain more than one input node

 </dd>
    <dt><tt> &ieReplacementMode</tt>
   <dd>         Replace : Remove the existing product Output link and add a link to a new Output product reference
         Update  : Modifies the existing Product Output with the new output result
                   if no output exist, create a new one
 </dd>
    <dt><tt> ibForceLoad:</tt>
   <dd>           FALSE: the prexisting system output is not loaded by Perform. 
           TRUE : the prexisting system output is loaded by Perform if not already present in session. 
 </dd>
    <dt><tt> &oeOutputPerformDiag</tt>
   <dd>            Diagnostic after Perform execution to be analyzed in case of failure.
 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><code>S_OK</code> <dd>
               System Output reference succesfully created and linked to the system/operation reference
               oeOutputPerformDiag : DELIPPRSystemOrOperationOutputCompute::None
 <dt><code>S_FALSE</code> <dd>
               System Output reference succesfully computed leads to particular case
               oeOutputPerformDiag : DELIPPRSystemOrOperationOutputCompute::UpdatedOutputIsEmpty 
                              System/operation output is empty once updated.
               oeOutputPerformDiag : DELIPPRSystemOrOperationOutputCompute::IdenticalOutputNotUpdated 
                              System/operation has a preexisting output and new computed output is the same.
                              Update is not performed.
 <dt><code>E_FAIL</code> <dd>
                       oeOutputPerformDiag==DELIPPRSystemOrOperationOutputCompute::LicenseMissing
                              Licensing error.
                       oeOutputPerformDiag==DELIPPRSystemOrOperationOutputCompute::ExistingOutputNotLoaded
                              System/operation has a preexisting output. It is not loaded in session. Update is prevented
                       oeOutputPerformDiag==DELIPPRSystemOrOperationOutputCompute::ExistingOutputLoadFailed
                              System/operation has a preexisting output. It could not be loaded in session.Replace and Update are prevented
                       oeOutputPerformDiag==DELIPPRSystemOrOperationOutputCompute::EmptyOutputNotCreated
                              System/operation has no output yet. System output computed is empty. In replace mode, link to the empty output is prevented
                        oeOutputPerformDiag==DELIPPRSystemOrOperationOutputCompute::ExistingNotReplacedByEmpty
                              System/operation has a preexisting output. System output computed is empty. In replace mode, link to the empty output is prevented
                       oeOutputPerformDiag==DELIPPRSystemOrOperationOutputCompute::None
                            unexpected error
 </dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="eOutputPerformDiag"> <dt> o <b>eOutputPerformDiag</b>
<dl>
  <dd>
<pre>
enum <b>eOutputPerformDiag</b> {
  None,
  LicenseMissing,
  ExistingOutputNotLoaded,
  ExistingOutputLoadFailed,
  UpdatedOutputIsEmpty,
  IdenticalOutputNotUpdated,
  ExistingNotReplacedByEmpty,
  EmptyOutputNotCreated
}
</pre>
  Defines a diagnostic after Perform
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> None:</tt>
   <dd> no specific issue was detected   </dd>
    <dt><tt> LicenseMissing:</tt>
   <dd> license missing prevent API use </dd>
    <dt><tt> ExistingOutputNotLoaded:</tt>
   <dd>  </dd>
    <dt><tt> ExistingOutputLoadFailed:</tt>
   <dd>  </dd>
    <dt><tt> UpdatedOutputIsEmpty:</tt>
   <dd>  </dd>
    <dt><tt> ExistingNotReplacedByEmpty:</tt>
   <dd>  </dd>
    <dt><tt> IdenticalOutputNotUpdated</tt>
   <dd> </dd>
    <dt><tt> EmptyOutputNotCreated:</tt>
   <dd> </dd>
</dl>
</dl>
</dl>
<a name="eReplacementMode"> <dt> o <b>eReplacementMode</b>
<dl>
  <dd>
<pre>
enum <b>eReplacementMode</b> {
  RelacementModeUndef,
  Replace,
  Update
}
</pre>
  Defines a replacement mode. 
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Undef</tt>
   <dd>          Undef replacement mode. 
 </dd>
    <dt><tt> Replace</tt>
   <dd>          Remove the existing product Output link and add a link to a new Output product reference
 </dd>
    <dt><tt> Update</tt>
   <dd>          Modifies the existing Product Output with the new output result</dd>
</dl>
</dl>
</dl>
<a name="eStructureMode"> <dt> o <b>eStructureMode</b>
<dl>
  <dd>
<pre>
enum <b>eStructureMode</b> {
  StructureModeUndef,
  Simple,
  Multiple
}
</pre>
  Defines an output structure mode. 
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Undef</tt>
   <dd>          Undef structure mode. 
 </dd>
    <dt><tt> Simple</tt>
   <dd>          Output will contain at most one input node
 </dd>
    <dt><tt> Multiple</tt>
   <dd>         Output could contain more than one input node</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>DELIPPRSystemOrOperationOutputCompute.h</b><br>
If needed, your Imakefile.mk should include the module: <b>DELMPCAAItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

